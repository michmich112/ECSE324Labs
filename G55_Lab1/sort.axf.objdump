
//campus.mcgill.ca/EMF/ELE/jpeter38/My Documents/ECSE324/G55_Lab1/sort.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
	.text
	.global _start
_start:
SETSTART:	LDR R2, N 			// R2 Holds the number of elements in the list
   0:	e59f2050 	ldr	r2, [pc, #80]	; 58 <N>
			LDR R4, SORTED		// R4 takes the sorted value
   4:	e59f4048 	ldr	r4, [pc, #72]	; 54 <SORTED>
			LDR R3, =NUMBERS	// R3 holds the address of the list of numbers 
   8:	e59f306c 	ldr	r3, [pc, #108]	; 7c <NUMBERS+0x20>
			ADD R1, R3, #4		// R1 points to the next value in the list
   c:	e2831004 	add	r1, r3, #4

00000010 <LOOP>:

LOOP:		SUBS R2, R2, #1		// Decrement the loop counter
  10:	e2522001 	subs	r2, r2, #1
			BEQ CHECKSORT		// Go to check if sorted when zero
  14:	0a00000a 	beq	44 <CHECKSORT>
			LDR R5, [R1] 		// Load the value held in R1 into R5
  18:	e5915000 	ldr	r5, [r1]
			LDR R6, [R3] 		// Load the value held in R3 into R6
  1c:	e5936000 	ldr	r6, [r3]
			CMP R5, R6 			// Compare values 
  20:	e1550006 	cmp	r5, r6
			BMI SWITCH 			// If the val before is bigger switch them
  24:	4a000000 	bmi	2c <SWITCH>
			B INCREMENT 		// Increment position in the list
  28:	ea000002 	b	38 <INCREMENT>

0000002c <SWITCH>:

SWITCH:		STR R5, [R3] 		// Store the value of R5 into the address at R3
  2c:	e5835000 	str	r5, [r3]
			STR R6, [R1] 		// Store the value held in R6 into the address at R1
  30:	e5816000 	str	r6, [r1]
			ADD R4, R4, #1 		// Since we switched the array we increment sorted so its != 0
  34:	e2844001 	add	r4, r4, #1

00000038 <INCREMENT>:

INCREMENT:	ADD R3, R3, #4 		// Set the address held in R3 to the next value in the list
  38:	e2833004 	add	r3, r3, #4
			ADD R1, R1, #4 		// Select the next element in the list
  3c:	e2811004 	add	r1, r1, #4
			B LOOP 				// Go to Loop
  40:	eafffff2 	b	10 <LOOP>

00000044 <CHECKSORT>:

CHECKSORT:	CMP R4, #0 			// Check if R4 still has its initial value (i.e. hasnt gone through SWITCH)
  44:	e3540000 	cmp	r4, #0
			BEQ END 			// If it is sorted go to the end
  48:	0a000000 	beq	50 <END>
			B SETSTART 			// Else do another pass in the sorting loop
  4c:	eaffffeb 	b	0 <__cs3_interrupt_vector>

00000050 <END>:

END: B END
  50:	eafffffe 	b	50 <END>

00000054 <SORTED>:
  54:	00000000 	.word	0x00000000

00000058 <N>:
  58:	00000008 	.word	0x00000008

0000005c <NUMBERS>:
  5c:	00000004 	.word	0x00000004
  60:	00000005 	.word	0x00000005
  64:	00000003 	.word	0x00000003
  68:	00000006 	.word	0x00000006
  6c:	00000001 	.word	0x00000001
  70:	00000008 	.word	0x00000008
  74:	00000002 	.word	0x00000002
  78:	00000005 	.word	0x00000005
  7c:	0000005c 	.word	0x0000005c
