
//campus.mcgill.ca/EMF/ELE/mcanta5/Desktop/ECSE324Labs/G55_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	4c 18 00 00 58 18 00 00 64 18 00 00 70 18 00 00     L...X...d...p...
      30:	7c 18 00 00 d4 2c 00 00 f4 16 00 00 88 18 00 00     |....,..........

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000ae5 	bl	2c70 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002dbc 	.word	0x00002dbc

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00032018 	.word	0x00032018

00000124 <__cs3_heap_start_ptr>:
     124:	00032048 	.word	0x00032048

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00032020 	.word	0x00032020
     170:	00032023 	.word	0x00032023
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00032020 	.word	0x00032020
     1bc:	00032020 	.word	0x00032020
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00032020 	.word	0x00032020
     200:	00000000 	.word	0x00000000
     204:	00002d60 	.word	0x00002d60

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002d60 	.word	0x00002d60
     250:	00032024 	.word	0x00032024
     254:	00002dc0 	.word	0x00002dc0
     258:	00000000 	.word	0x00000000

0000025c <getSampleOld>:
//array holding the frequencies, index matched to the keys pressed
float frequencies[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};

// Get the sample based on the frequency and the "index"
// Returns double: signal
double getSampleOld(float freq, int t) {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd018 	sub	sp, sp, #24
     268:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     26c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4

	int index = (((int)freq) * t)%48000;
     270:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     274:	eb00094e 	bl	27b4 <__aeabi_f2iz>
     278:	e1a03000 	mov	r3, r0
     27c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     280:	e0030392 	mul	r3, r2, r3
     284:	e30129f1 	movw	r2, #6641	; 0x19f1
     288:	e3402576 	movt	r2, #1398	; 0x576
     28c:	e0c21392 	smull	r1, r2, r2, r3
     290:	e1a01542 	asr	r1, r2, #10
     294:	e1a02fc3 	asr	r2, r3, #31
     298:	e0622001 	rsb	r2, r2, r1
     29c:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2a0:	e0020291 	mul	r2, r1, r2
     2a4:	e0623003 	rsb	r3, r2, r3
     2a8:	e50b3008 	str	r3, [r11, #-8]
	double signal = sine[index];
     2ac:	e3023de8 	movw	r3, #11752	; 0x2de8
     2b0:	e3403000 	movt	r3, #0
     2b4:	e51b2008 	ldr	r2, [r11, #-8]
     2b8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     2bc:	e1a00003 	mov	r0, r3
     2c0:	eb00065d 	bl	1c3c <__aeabi_i2d>
     2c4:	e1a02000 	mov	r2, r0
     2c8:	e1a03001 	mov	r3, r1
     2cc:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

	return signal;
     2d0:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
     2d4:	e1a00002 	mov	r0, r2
     2d8:	e1a01003 	mov	r1, r3
     2dc:	e24bd004 	sub	sp, r11, #4
     2e0:	e8bd8800 	pop	{r11, pc}

000002e4 <getSample>:

// Get the sample based on the frequency and the "index" using linear interpolation
// Returns double: signal
double getSample(float freq, int t) {
     2e4:	e92d4830 	push	{r4, r5, r11, lr}
     2e8:	e28db00c 	add	r11, sp, #12
     2ec:	e24dd028 	sub	sp, sp, #40	; 0x28
     2f0:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
     2f4:	e50b1034 	str	r1, [r11, #-52]	; 0xffffffcc
	int truncatedIndex = ((int) freq)*t;
     2f8:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     2fc:	eb00092c 	bl	27b4 <__aeabi_f2iz>
     300:	e1a03000 	mov	r3, r0
     304:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
     308:	e0030392 	mul	r3, r2, r3
     30c:	e50b3010 	str	r3, [r11, #-16]
	double fractional = (freq*t) - truncatedIndex;
     310:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
     314:	eb000831 	bl	23e0 <__aeabi_i2f>
     318:	e1a03000 	mov	r3, r0
     31c:	e1a00003 	mov	r0, r3
     320:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
     324:	eb000864 	bl	24bc <__aeabi_fmul>
     328:	e1a03000 	mov	r3, r0
     32c:	e1a04003 	mov	r4, r3
     330:	e51b0010 	ldr	r0, [r11, #-16]
     334:	eb000829 	bl	23e0 <__aeabi_i2f>
     338:	e1a03000 	mov	r3, r0
     33c:	e1a00004 	mov	r0, r4
     340:	e1a01003 	mov	r1, r3
     344:	eb0007b3 	bl	2218 <__aeabi_fsub>
     348:	e1a03000 	mov	r3, r0
     34c:	e1a00003 	mov	r0, r3
     350:	eb000643 	bl	1c64 <__aeabi_f2d>
     354:	e1a02000 	mov	r2, r0
     358:	e1a03001 	mov	r3, r1
     35c:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4

	int index = truncatedIndex % 48000;
     360:	e51b3010 	ldr	r3, [r11, #-16]
     364:	e30129f1 	movw	r2, #6641	; 0x19f1
     368:	e3402576 	movt	r2, #1398	; 0x576
     36c:	e0c21392 	smull	r1, r2, r2, r3
     370:	e1a01542 	asr	r1, r2, #10
     374:	e1a02fc3 	asr	r2, r3, #31
     378:	e0622001 	rsb	r2, r2, r1
     37c:	e30b1b80 	movw	r1, #48000	; 0xbb80
     380:	e0020291 	mul	r2, r1, r2
     384:	e0623003 	rsb	r3, r2, r3
     388:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	//calculate linear interpolation
	//sine[casted + fractional] = (1-fractional)*sine[index] + fractional[index+1]
	double signal = (1.0 - fractional) * sine[index] + fractional * sine[index + 1]; //lol lets hope it doesnt overflow
     38c:	e3a00000 	mov	r0, #0
     390:	e3a01000 	mov	r1, #0
     394:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     398:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     39c:	eb000558 	bl	1904 <__aeabi_dsub>
     3a0:	e1a02000 	mov	r2, r0
     3a4:	e1a03001 	mov	r3, r1
     3a8:	e1a04002 	mov	r4, r2
     3ac:	e1a05003 	mov	r5, r3
     3b0:	e3023de8 	movw	r3, #11752	; 0x2de8
     3b4:	e3403000 	movt	r3, #0
     3b8:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     3bc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     3c0:	e1a00003 	mov	r0, r3
     3c4:	eb00061c 	bl	1c3c <__aeabi_i2d>
     3c8:	e1a02000 	mov	r2, r0
     3cc:	e1a03001 	mov	r3, r1
     3d0:	e1a00004 	mov	r0, r4
     3d4:	e1a01005 	mov	r1, r5
     3d8:	eb00064e 	bl	1d18 <__aeabi_dmul>
     3dc:	e1a02000 	mov	r2, r0
     3e0:	e1a03001 	mov	r3, r1
     3e4:	e1a04002 	mov	r4, r2
     3e8:	e1a05003 	mov	r5, r3
     3ec:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     3f0:	e2832001 	add	r2, r3, #1
     3f4:	e3023de8 	movw	r3, #11752	; 0x2de8
     3f8:	e3403000 	movt	r3, #0
     3fc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     400:	e1a00003 	mov	r0, r3
     404:	eb00060c 	bl	1c3c <__aeabi_i2d>
     408:	e1a02000 	mov	r2, r0
     40c:	e1a03001 	mov	r3, r1
     410:	e1a00002 	mov	r0, r2
     414:	e1a01003 	mov	r1, r3
     418:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     41c:	eb00063d 	bl	1d18 <__aeabi_dmul>
     420:	e1a02000 	mov	r2, r0
     424:	e1a03001 	mov	r3, r1
     428:	e1a00004 	mov	r0, r4
     42c:	e1a01005 	mov	r1, r5
     430:	eb000534 	bl	1908 <__adddf3>
     434:	e1a02000 	mov	r2, r0
     438:	e1a03001 	mov	r3, r1
     43c:	e14b22fc 	strd	r2, [r11, #-44]	; 0xffffffd4

	return signal;
     440:	e14b22dc 	ldrd	r2, [r11, #-44]	; 0xffffffd4
}
     444:	e1a00002 	mov	r0, r2
     448:	e1a01003 	mov	r1, r3
     44c:	e24bd00c 	sub	sp, r11, #12
     450:	e8bd8830 	pop	{r4, r5, r11, pc}

00000454 <generateSignal>:

// Generate the signal from each frequency pressed and add them together
// Returns double: summed signal
double generateSignal(char* keys, int t) {
     454:	e92d4800 	push	{r11, lr}
     458:	e28db004 	add	r11, sp, #4
     45c:	e24dd018 	sub	sp, sp, #24
     460:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     464:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int i;
	double data = 0;
     468:	e3a02000 	mov	r2, #0
     46c:	e3a03000 	mov	r3, #0
     470:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
	// Loop through all keys
	for(i = 0; i < 8; i++){
     474:	e3a03000 	mov	r3, #0
     478:	e50b3008 	str	r3, [r11, #-8]
     47c:	ea000016 	b	4dc <generateSignal+0x88>
		// Check if key is pressed
		if(keys[i] == 1){
     480:	e51b3008 	ldr	r3, [r11, #-8]
     484:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     488:	e0823003 	add	r3, r2, r3
     48c:	e5d33000 	ldrb	r3, [r3]
     490:	e3530001 	cmp	r3, #1
     494:	1a00000d 	bne	4d0 <generateSignal+0x7c>
			// Sum all frequency samples
			data += getSampleOld(frequencies[i], t);
     498:	e3023dc8 	movw	r3, #11720	; 0x2dc8
     49c:	e3403000 	movt	r3, #0
     4a0:	e51b2008 	ldr	r2, [r11, #-8]
     4a4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     4a8:	e1a00003 	mov	r0, r3
     4ac:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     4b0:	ebffff69 	bl	25c <getSampleOld>
     4b4:	e1a02000 	mov	r2, r0
     4b8:	e1a03001 	mov	r3, r1
     4bc:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     4c0:	eb000510 	bl	1908 <__adddf3>
     4c4:	e1a02000 	mov	r2, r0
     4c8:	e1a03001 	mov	r3, r1
     4cc:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
// Returns double: summed signal
double generateSignal(char* keys, int t) {
	int i;
	double data = 0;
	// Loop through all keys
	for(i = 0; i < 8; i++){
     4d0:	e51b3008 	ldr	r3, [r11, #-8]
     4d4:	e2833001 	add	r3, r3, #1
     4d8:	e50b3008 	str	r3, [r11, #-8]
     4dc:	e51b3008 	ldr	r3, [r11, #-8]
     4e0:	e3530007 	cmp	r3, #7
     4e4:	daffffe5 	ble	480 <generateSignal+0x2c>
			// Sum all frequency samples
			data += getSampleOld(frequencies[i], t);
			//data += getSample(frequencies[i], t);
		}
	}
	return data;
     4e8:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
     4ec:	e1a00002 	mov	r0, r2
     4f0:	e1a01003 	mov	r1, r3
     4f4:	e24bd004 	sub	sp, r11, #4
     4f8:	e8bd8800 	pop	{r11, pc}

000004fc <writeNames>:

//Screen is 79 x 59
void writeNames(){
     4fc:	e92d4800 	push	{r11, lr}
     500:	e28db004 	add	r11, sp, #4
	VGA_write_char_ASM(01, 01, 'M');
     504:	e3a00001 	mov	r0, #1
     508:	e3a01001 	mov	r1, #1
     50c:	e3a0204d 	mov	r2, #77	; 0x4d
     510:	eb0003c8 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(02, 01, 'i');
     514:	e3a00002 	mov	r0, #2
     518:	e3a01001 	mov	r1, #1
     51c:	e3a02069 	mov	r2, #105	; 0x69
     520:	eb0003c4 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(03, 01, 'c');
     524:	e3a00003 	mov	r0, #3
     528:	e3a01001 	mov	r1, #1
     52c:	e3a02063 	mov	r2, #99	; 0x63
     530:	eb0003c0 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(04, 01, 'h');
     534:	e3a00004 	mov	r0, #4
     538:	e3a01001 	mov	r1, #1
     53c:	e3a02068 	mov	r2, #104	; 0x68
     540:	eb0003bc 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(05, 01, 'e');
     544:	e3a00005 	mov	r0, #5
     548:	e3a01001 	mov	r1, #1
     54c:	e3a02065 	mov	r2, #101	; 0x65
     550:	eb0003b8 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(06, 01, 'l');
     554:	e3a00006 	mov	r0, #6
     558:	e3a01001 	mov	r1, #1
     55c:	e3a0206c 	mov	r2, #108	; 0x6c
     560:	eb0003b4 	bl	1438 <VGA_write_char_ASM>

	VGA_write_char_ASM( 8, 01, 'C');
     564:	e3a00008 	mov	r0, #8
     568:	e3a01001 	mov	r1, #1
     56c:	e3a02043 	mov	r2, #67	; 0x43
     570:	eb0003b0 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM( 9, 01, 'a');
     574:	e3a00009 	mov	r0, #9
     578:	e3a01001 	mov	r1, #1
     57c:	e3a02061 	mov	r2, #97	; 0x61
     580:	eb0003ac 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(10, 01, 'n');
     584:	e3a0000a 	mov	r0, #10
     588:	e3a01001 	mov	r1, #1
     58c:	e3a0206e 	mov	r2, #110	; 0x6e
     590:	eb0003a8 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(11, 01, 't');
     594:	e3a0000b 	mov	r0, #11
     598:	e3a01001 	mov	r1, #1
     59c:	e3a02074 	mov	r2, #116	; 0x74
     5a0:	eb0003a4 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(12, 01, 'a');
     5a4:	e3a0000c 	mov	r0, #12
     5a8:	e3a01001 	mov	r1, #1
     5ac:	e3a02061 	mov	r2, #97	; 0x61
     5b0:	eb0003a0 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(13, 01, 'c');
     5b4:	e3a0000d 	mov	r0, #13
     5b8:	e3a01001 	mov	r1, #1
     5bc:	e3a02063 	mov	r2, #99	; 0x63
     5c0:	eb00039c 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(14, 01, 'u');
     5c4:	e3a0000e 	mov	r0, #14
     5c8:	e3a01001 	mov	r1, #1
     5cc:	e3a02075 	mov	r2, #117	; 0x75
     5d0:	eb000398 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(15, 01, 'z');
     5d4:	e3a0000f 	mov	r0, #15
     5d8:	e3a01001 	mov	r1, #1
     5dc:	e3a0207a 	mov	r2, #122	; 0x7a
     5e0:	eb000394 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(16, 01, 'e');
     5e4:	e3a00010 	mov	r0, #16
     5e8:	e3a01001 	mov	r1, #1
     5ec:	e3a02065 	mov	r2, #101	; 0x65
     5f0:	eb000390 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(17, 01, 'n');
     5f4:	e3a00011 	mov	r0, #17
     5f8:	e3a01001 	mov	r1, #1
     5fc:	e3a0206e 	mov	r2, #110	; 0x6e
     600:	eb00038c 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(18, 01, 'e');
     604:	e3a00012 	mov	r0, #18
     608:	e3a01001 	mov	r1, #1
     60c:	e3a02065 	mov	r2, #101	; 0x65
     610:	eb000388 	bl	1438 <VGA_write_char_ASM>

	VGA_write_char_ASM(01, 02, 'J');
     614:	e3a00001 	mov	r0, #1
     618:	e3a01002 	mov	r1, #2
     61c:	e3a0204a 	mov	r2, #74	; 0x4a
     620:	eb000384 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(02, 02, 'a');
     624:	e3a00002 	mov	r0, #2
     628:	e3a01002 	mov	r1, #2
     62c:	e3a02061 	mov	r2, #97	; 0x61
     630:	eb000380 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(03, 02, 'k');
     634:	e3a00003 	mov	r0, #3
     638:	e3a01002 	mov	r1, #2
     63c:	e3a0206b 	mov	r2, #107	; 0x6b
     640:	eb00037c 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(04, 02, 'e');
     644:	e3a00004 	mov	r0, #4
     648:	e3a01002 	mov	r1, #2
     64c:	e3a02065 	mov	r2, #101	; 0x65
     650:	eb000378 	bl	1438 <VGA_write_char_ASM>

	VGA_write_char_ASM(06, 02, 'P');
     654:	e3a00006 	mov	r0, #6
     658:	e3a01002 	mov	r1, #2
     65c:	e3a02050 	mov	r2, #80	; 0x50
     660:	eb000374 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(07, 02, 'e');
     664:	e3a00007 	mov	r0, #7
     668:	e3a01002 	mov	r1, #2
     66c:	e3a02065 	mov	r2, #101	; 0x65
     670:	eb000370 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM( 8, 02, 't');
     674:	e3a00008 	mov	r0, #8
     678:	e3a01002 	mov	r1, #2
     67c:	e3a02074 	mov	r2, #116	; 0x74
     680:	eb00036c 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM( 9, 02, 'e');
     684:	e3a00009 	mov	r0, #9
     688:	e3a01002 	mov	r1, #2
     68c:	e3a02065 	mov	r2, #101	; 0x65
     690:	eb000368 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(10, 02, 'r');
     694:	e3a0000a 	mov	r0, #10
     698:	e3a01002 	mov	r1, #2
     69c:	e3a02072 	mov	r2, #114	; 0x72
     6a0:	eb000364 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(11, 02, 's');
     6a4:	e3a0000b 	mov	r0, #11
     6a8:	e3a01002 	mov	r1, #2
     6ac:	e3a02073 	mov	r2, #115	; 0x73
     6b0:	eb000360 	bl	1438 <VGA_write_char_ASM>
}
     6b4:	e8bd8800 	pop	{r11, pc}

000006b8 <writeVolume>:

void writeVolume(int volume){
     6b8:	e92d4800 	push	{r11, lr}
     6bc:	e28db004 	add	r11, sp, #4
     6c0:	e24dd008 	sub	sp, sp, #8
     6c4:	e50b0008 	str	r0, [r11, #-8]
	VGA_write_char_ASM(70, 01, 'V');
     6c8:	e3a00046 	mov	r0, #70	; 0x46
     6cc:	e3a01001 	mov	r1, #1
     6d0:	e3a02056 	mov	r2, #86	; 0x56
     6d4:	eb000357 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(71, 01, 'o');
     6d8:	e3a00047 	mov	r0, #71	; 0x47
     6dc:	e3a01001 	mov	r1, #1
     6e0:	e3a0206f 	mov	r2, #111	; 0x6f
     6e4:	eb000353 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(72, 01, 'l');
     6e8:	e3a00048 	mov	r0, #72	; 0x48
     6ec:	e3a01001 	mov	r1, #1
     6f0:	e3a0206c 	mov	r2, #108	; 0x6c
     6f4:	eb00034f 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(73, 01, 'u');
     6f8:	e3a00049 	mov	r0, #73	; 0x49
     6fc:	e3a01001 	mov	r1, #1
     700:	e3a02075 	mov	r2, #117	; 0x75
     704:	eb00034b 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(74, 01, 'm');
     708:	e3a0004a 	mov	r0, #74	; 0x4a
     70c:	e3a01001 	mov	r1, #1
     710:	e3a0206d 	mov	r2, #109	; 0x6d
     714:	eb000347 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(75, 01, 'e');
     718:	e3a0004b 	mov	r0, #75	; 0x4b
     71c:	e3a01001 	mov	r1, #1
     720:	e3a02065 	mov	r2, #101	; 0x65
     724:	eb000343 	bl	1438 <VGA_write_char_ASM>
	VGA_write_char_ASM(76, 01, ':');
     728:	e3a0004c 	mov	r0, #76	; 0x4c
     72c:	e3a01001 	mov	r1, #1
     730:	e3a0203a 	mov	r2, #58	; 0x3a
     734:	eb00033f 	bl	1438 <VGA_write_char_ASM>
	if(volume < 10){
     738:	e51b3008 	ldr	r3, [r11, #-8]
     73c:	e3530009 	cmp	r3, #9
     740:	ca00000c 	bgt	778 <writeVolume+0xc0>
		VGA_write_char_ASM(77, 01, '0');
     744:	e3a0004d 	mov	r0, #77	; 0x4d
     748:	e3a01001 	mov	r1, #1
     74c:	e3a02030 	mov	r2, #48	; 0x30
     750:	eb000338 	bl	1438 <VGA_write_char_ASM>
		VGA_write_char_ASM(78, 01, volume + 48);
     754:	e51b3008 	ldr	r3, [r11, #-8]
     758:	e6ef3073 	uxtb	r3, r3
     75c:	e2833030 	add	r3, r3, #48	; 0x30
     760:	e6ef3073 	uxtb	r3, r3
     764:	e3a0004e 	mov	r0, #78	; 0x4e
     768:	e3a01001 	mov	r1, #1
     76c:	e1a02003 	mov	r2, r3
     770:	eb000330 	bl	1438 <VGA_write_char_ASM>
     774:	ea000007 	b	798 <writeVolume+0xe0>
	}else{
		VGA_write_char_ASM(77, 01, '1');
     778:	e3a0004d 	mov	r0, #77	; 0x4d
     77c:	e3a01001 	mov	r1, #1
     780:	e3a02031 	mov	r2, #49	; 0x31
     784:	eb00032b 	bl	1438 <VGA_write_char_ASM>
		VGA_write_char_ASM(78, 01, '0');
     788:	e3a0004e 	mov	r0, #78	; 0x4e
     78c:	e3a01001 	mov	r1, #1
     790:	e3a02030 	mov	r2, #48	; 0x30
     794:	eb000327 	bl	1438 <VGA_write_char_ASM>
	}
}
     798:	e24bd004 	sub	sp, r11, #4
     79c:	e8bd8800 	pop	{r11, pc}

000007a0 <main>:

int main() {
     7a0:	e92d4810 	push	{r4, r11, lr}
     7a4:	e28db008 	add	r11, sp, #8
     7a8:	e24ddea3 	sub	sp, sp, #2608	; 0xa30
     7ac:	e24dd004 	sub	sp, sp, #4

	int keyReleased = 0;
     7b0:	e3a03000 	mov	r3, #0
     7b4:	e50b3010 	str	r3, [r11, #-16]
	double history[320] = { 0 };
     7b8:	e24b3ea2 	sub	r3, r11, #2592	; 0xa20
     7bc:	e243300c 	sub	r3, r3, #12
     7c0:	e2433008 	sub	r3, r3, #8
     7c4:	e3a02c0a 	mov	r2, #2560	; 0xa00
     7c8:	e1a00003 	mov	r0, r3
     7cc:	e3a01000 	mov	r1, #0
     7d0:	eb000823 	bl	2864 <memset>
	int volume = 1;
     7d4:	e3a03001 	mov	r3, #1
     7d8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	char value;
	int t = 0;
     7dc:	e3a03000 	mov	r3, #0
     7e0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	double signalSum = 0.0;
     7e4:	e3a02000 	mov	r2, #0
     7e8:	e3a03000 	mov	r3, #0
     7ec:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc

	while(1){
		writeNames();
     7f0:	ebffff41 	bl	4fc <writeNames>
		writeVolume(volume);
     7f4:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     7f8:	ebffffae 	bl	6b8 <writeVolume>

		if(read_ps2_data_ASM(&value)) {
     7fc:	e24b3ea2 	sub	r3, r11, #2592	; 0xa20
     800:	e243300c 	sub	r3, r3, #12
     804:	e2433009 	sub	r3, r3, #9
     808:	e1a00003 	mov	r0, r3
     80c:	eb00026c 	bl	11c4 <read_ps2_data_ASM>
     810:	e1a03000 	mov	r3, r0
     814:	e3530000 	cmp	r3, #0
     818:	0a0000b9 	beq	b04 <ICDIPTR+0x304>
			switch (value) {
     81c:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     820:	e3530042 	cmp	r3, #66	; 0x42
     824:	0a000068 	beq	9cc <ICDIPTR+0x1cc>
     828:	e3530042 	cmp	r3, #66	; 0x42
     82c:	ca00000d 	bgt	868 <ICDIPTR+0x68>
     830:	e3530023 	cmp	r3, #35	; 0x23
     834:	0a000037 	beq	918 <ICDIPTR+0x118>
     838:	e3530023 	cmp	r3, #35	; 0x23
     83c:	ca000004 	bgt	854 <ICDIPTR+0x54>
     840:	e353001b 	cmp	r3, #27
     844:	0a000024 	beq	8dc <ICDIPTR+0xdc>
     848:	e353001c 	cmp	r3, #28
     84c:	0a000013 	beq	8a0 <ICDIPTR+0xa0>
     850:	ea0000a5 	b	aec <ICDIPTR+0x2ec>
     854:	e353002b 	cmp	r3, #43	; 0x2b
     858:	0a00003d 	beq	954 <ICDIPTR+0x154>
     85c:	e353003b 	cmp	r3, #59	; 0x3b
     860:	0a00004a 	beq	990 <ICDIPTR+0x190>
     864:	ea0000a0 	b	aec <ICDIPTR+0x2ec>
     868:	e353004e 	cmp	r3, #78	; 0x4e
     86c:	0a00008f 	beq	ab0 <ICDIPTR+0x2b0>
     870:	e353004e 	cmp	r3, #78	; 0x4e
     874:	ca000004 	bgt	88c <ICDIPTR+0x8c>
     878:	e353004b 	cmp	r3, #75	; 0x4b
     87c:	0a000061 	beq	a08 <ICDIPTR+0x208>
     880:	e353004c 	cmp	r3, #76	; 0x4c
     884:	0a00006e 	beq	a44 <ICDIPTR+0x244>
     888:	ea000097 	b	aec <ICDIPTR+0x2ec>
     88c:	e3530055 	cmp	r3, #85	; 0x55
     890:	0a00007a 	beq	a80 <ICDIPTR+0x280>
     894:	e35300f0 	cmp	r3, #240	; 0xf0
     898:	0a000090 	beq	ae0 <ICDIPTR+0x2e0>
     89c:	ea000092 	b	aec <ICDIPTR+0x2ec>
				// A = 130.813Hz
				case 0x1C:
					if(keyReleased == 1){
     8a0:	e51b3010 	ldr	r3, [r11, #-16]
     8a4:	e3530001 	cmp	r3, #1
     8a8:	1a000006 	bne	8c8 <ICDIPTR+0xc8>
						// printf( "a release\n" );
						keysPressed[0] = 0;
     8ac:	e302303c 	movw	r3, #8252	; 0x203c
     8b0:	e3403003 	movt	r3, #3
     8b4:	e3a02000 	mov	r2, #0
     8b8:	e5c32000 	strb	r2, [r3]
						keyReleased = 0;
     8bc:	e3a03000 	mov	r3, #0
     8c0:	e50b3010 	str	r3, [r11, #-16]
					} else{
						// printf( "a press\n" );
						keysPressed[0] = 1;
					}
					break;
     8c4:	ea00008e 	b	b04 <ICDIPTR+0x304>
						// printf( "a release\n" );
						keysPressed[0] = 0;
						keyReleased = 0;
					} else{
						// printf( "a press\n" );
						keysPressed[0] = 1;
     8c8:	e302303c 	movw	r3, #8252	; 0x203c
     8cc:	e3403003 	movt	r3, #3
     8d0:	e3a02001 	mov	r2, #1
     8d4:	e5c32000 	strb	r2, [r3]
					}
					break;
     8d8:	ea000089 	b	b04 <ICDIPTR+0x304>
				// S = 146.832Hz
				case 0x1B:
					if(keyReleased == 1){
     8dc:	e51b3010 	ldr	r3, [r11, #-16]
     8e0:	e3530001 	cmp	r3, #1
     8e4:	1a000006 	bne	904 <ICDIPTR+0x104>
						// printf( "s release\n" );
						keysPressed[1] = 0;
     8e8:	e302303c 	movw	r3, #8252	; 0x203c
     8ec:	e3403003 	movt	r3, #3
     8f0:	e3a02000 	mov	r2, #0
     8f4:	e5c32001 	strb	r2, [r3, #1]
						keyReleased = 0;
     8f8:	e3a03000 	mov	r3, #0
     8fc:	e50b3010 	str	r3, [r11, #-16]
					} else{
						// printf( "s press\n" );
						keysPressed[1] = 1;
					}
					break;
     900:	ea00007f 	b	b04 <ICDIPTR+0x304>
						// printf( "s release\n" );
						keysPressed[1] = 0;
						keyReleased = 0;
					} else{
						// printf( "s press\n" );
						keysPressed[1] = 1;
     904:	e302303c 	movw	r3, #8252	; 0x203c
     908:	e3403003 	movt	r3, #3
     90c:	e3a02001 	mov	r2, #1
     910:	e5c32001 	strb	r2, [r3, #1]
					}
					break;
     914:	ea00007a 	b	b04 <ICDIPTR+0x304>
				// D = 164.814Hz
				case 0x23:
					if(keyReleased == 1){
     918:	e51b3010 	ldr	r3, [r11, #-16]
     91c:	e3530001 	cmp	r3, #1
     920:	1a000006 	bne	940 <ICDIPTR+0x140>
						keysPressed[2] = 0;
     924:	e302303c 	movw	r3, #8252	; 0x203c
     928:	e3403003 	movt	r3, #3
     92c:	e3a02000 	mov	r2, #0
     930:	e5c32002 	strb	r2, [r3, #2]
						keyReleased = 0;
     934:	e3a03000 	mov	r3, #0
     938:	e50b3010 	str	r3, [r11, #-16]
					} else{
						keysPressed[2] = 1;
					}
					break;
     93c:	ea000070 	b	b04 <ICDIPTR+0x304>
				case 0x23:
					if(keyReleased == 1){
						keysPressed[2] = 0;
						keyReleased = 0;
					} else{
						keysPressed[2] = 1;
     940:	e302303c 	movw	r3, #8252	; 0x203c
     944:	e3403003 	movt	r3, #3
     948:	e3a02001 	mov	r2, #1
     94c:	e5c32002 	strb	r2, [r3, #2]
					}
					break;
     950:	ea00006b 	b	b04 <ICDIPTR+0x304>
				// F = 174.614Hz
				case 0x2B:
					if(keyReleased == 1){
     954:	e51b3010 	ldr	r3, [r11, #-16]
     958:	e3530001 	cmp	r3, #1
     95c:	1a000006 	bne	97c <ICDIPTR+0x17c>
						keysPressed[3] = 0;
     960:	e302303c 	movw	r3, #8252	; 0x203c
     964:	e3403003 	movt	r3, #3
     968:	e3a02000 	mov	r2, #0
     96c:	e5c32003 	strb	r2, [r3, #3]
						keyReleased = 0;
     970:	e3a03000 	mov	r3, #0
     974:	e50b3010 	str	r3, [r11, #-16]
					} else{
						keysPressed[3] = 1;
					}
					break;
     978:	ea000061 	b	b04 <ICDIPTR+0x304>
				case 0x2B:
					if(keyReleased == 1){
						keysPressed[3] = 0;
						keyReleased = 0;
					} else{
						keysPressed[3] = 1;
     97c:	e302303c 	movw	r3, #8252	; 0x203c
     980:	e3403003 	movt	r3, #3
     984:	e3a02001 	mov	r2, #1
     988:	e5c32003 	strb	r2, [r3, #3]
					}
					break;
     98c:	ea00005c 	b	b04 <ICDIPTR+0x304>
				// J = 195.998Hz
				case 0x3B:
					if(keyReleased == 1){
     990:	e51b3010 	ldr	r3, [r11, #-16]
     994:	e3530001 	cmp	r3, #1
     998:	1a000006 	bne	9b8 <ICDIPTR+0x1b8>
						keysPressed[4] = 0;
     99c:	e302303c 	movw	r3, #8252	; 0x203c
     9a0:	e3403003 	movt	r3, #3
     9a4:	e3a02000 	mov	r2, #0
     9a8:	e5c32004 	strb	r2, [r3, #4]
						keyReleased = 0;
     9ac:	e3a03000 	mov	r3, #0
     9b0:	e50b3010 	str	r3, [r11, #-16]
					} else{
						keysPressed[4] = 1;
					}
					break;
     9b4:	ea000052 	b	b04 <ICDIPTR+0x304>
				case 0x3B:
					if(keyReleased == 1){
						keysPressed[4] = 0;
						keyReleased = 0;
					} else{
						keysPressed[4] = 1;
     9b8:	e302303c 	movw	r3, #8252	; 0x203c
     9bc:	e3403003 	movt	r3, #3
     9c0:	e3a02001 	mov	r2, #1
     9c4:	e5c32004 	strb	r2, [r3, #4]
					}
					break;
     9c8:	ea00004d 	b	b04 <ICDIPTR+0x304>
				// K = 220.000Hz
				case 0x42:
					if(keyReleased == 1){
     9cc:	e51b3010 	ldr	r3, [r11, #-16]
     9d0:	e3530001 	cmp	r3, #1
     9d4:	1a000006 	bne	9f4 <ICDIPTR+0x1f4>
						keysPressed[5] = 0;
     9d8:	e302303c 	movw	r3, #8252	; 0x203c
     9dc:	e3403003 	movt	r3, #3
     9e0:	e3a02000 	mov	r2, #0
     9e4:	e5c32005 	strb	r2, [r3, #5]
						keyReleased = 0;
     9e8:	e3a03000 	mov	r3, #0
     9ec:	e50b3010 	str	r3, [r11, #-16]
					} else{
						keysPressed[5] = 1;
					}
					break;
     9f0:	ea000043 	b	b04 <ICDIPTR+0x304>
				case 0x42:
					if(keyReleased == 1){
						keysPressed[5] = 0;
						keyReleased = 0;
					} else{
						keysPressed[5] = 1;
     9f4:	e302303c 	movw	r3, #8252	; 0x203c
     9f8:	e3403003 	movt	r3, #3
     9fc:	e3a02001 	mov	r2, #1
     a00:	e5c32005 	strb	r2, [r3, #5]
					}
					break;
     a04:	ea00003e 	b	b04 <ICDIPTR+0x304>
				// L = 246.942Hz
				case 0x4B:
					if(keyReleased == 1){
     a08:	e51b3010 	ldr	r3, [r11, #-16]
     a0c:	e3530001 	cmp	r3, #1
     a10:	1a000006 	bne	a30 <ICDIPTR+0x230>
						keysPressed[6] = 0;
     a14:	e302303c 	movw	r3, #8252	; 0x203c
     a18:	e3403003 	movt	r3, #3
     a1c:	e3a02000 	mov	r2, #0
     a20:	e5c32006 	strb	r2, [r3, #6]
						keyReleased = 0;
     a24:	e3a03000 	mov	r3, #0
     a28:	e50b3010 	str	r3, [r11, #-16]
					} else{
						keysPressed[6] = 1;
					}
					break;
     a2c:	ea000034 	b	b04 <ICDIPTR+0x304>
				case 0x4B:
					if(keyReleased == 1){
						keysPressed[6] = 0;
						keyReleased = 0;
					} else{
						keysPressed[6] = 1;
     a30:	e302303c 	movw	r3, #8252	; 0x203c
     a34:	e3403003 	movt	r3, #3
     a38:	e3a02001 	mov	r2, #1
     a3c:	e5c32006 	strb	r2, [r3, #6]
					}
					break;
     a40:	ea00002f 	b	b04 <ICDIPTR+0x304>
				// ; = 261.626Hz
				case 0x4C:
					if(keyReleased == 1){
     a44:	e51b3010 	ldr	r3, [r11, #-16]
     a48:	e3530001 	cmp	r3, #1
     a4c:	1a000006 	bne	a6c <ICDIPTR+0x26c>
						keysPressed[7] = 0;
     a50:	e302303c 	movw	r3, #8252	; 0x203c
     a54:	e3403003 	movt	r3, #3
     a58:	e3a02000 	mov	r2, #0
     a5c:	e5c32007 	strb	r2, [r3, #7]
						keyReleased = 0;
     a60:	e3a03000 	mov	r3, #0
     a64:	e50b3010 	str	r3, [r11, #-16]
					}else{
						keysPressed[7] = 1;
					}
					break;
     a68:	ea000025 	b	b04 <ICDIPTR+0x304>
				case 0x4C:
					if(keyReleased == 1){
						keysPressed[7] = 0;
						keyReleased = 0;
					}else{
						keysPressed[7] = 1;
     a6c:	e302303c 	movw	r3, #8252	; 0x203c
     a70:	e3403003 	movt	r3, #3
     a74:	e3a02001 	mov	r2, #1
     a78:	e5c32007 	strb	r2, [r3, #7]
					}
					break;
     a7c:	ea000020 	b	b04 <ICDIPTR+0x304>
				// =/+ = vol up
				case 0x55:
					if(keyReleased){
     a80:	e51b3010 	ldr	r3, [r11, #-16]
     a84:	e3530000 	cmp	r3, #0
     a88:	0a00001a 	beq	af8 <ICDIPTR+0x2f8>
						if(volume<10){
     a8c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     a90:	e3530009 	cmp	r3, #9
     a94:	ca000002 	bgt	aa4 <ICDIPTR+0x2a4>
							volume++;
     a98:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     a9c:	e2833001 	add	r3, r3, #1
     aa0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						}
						keyReleased = 0;
     aa4:	e3a03000 	mov	r3, #0
     aa8:	e50b3010 	str	r3, [r11, #-16]
					}
					break;
     aac:	ea000011 	b	af8 <ICDIPTR+0x2f8>
				// -/_ = vol up
				case 0x4E:
					if(keyReleased){
     ab0:	e51b3010 	ldr	r3, [r11, #-16]
     ab4:	e3530000 	cmp	r3, #0
     ab8:	0a000010 	beq	b00 <ICDIPTR+0x300>
						if(volume>1){
     abc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ac0:	e3530001 	cmp	r3, #1
     ac4:	da000002 	ble	ad4 <ICDIPTR+0x2d4>
							volume--;
     ac8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     acc:	e2433001 	sub	r3, r3, #1
     ad0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						}
						keyReleased = 0;
     ad4:	e3a03000 	mov	r3, #0
     ad8:	e50b3010 	str	r3, [r11, #-16]
					}
					break;
     adc:	ea000007 	b	b00 <ICDIPTR+0x300>
				//the break code is the same for all keys
				case 0xF0:
					keyReleased = 1;
     ae0:	e3a03001 	mov	r3, #1
     ae4:	e50b3010 	str	r3, [r11, #-16]
					break;
     ae8:	ea000005 	b	b04 <ICDIPTR+0x304>
				default:
					keyReleased = 0;
     aec:	e3a03000 	mov	r3, #0
     af0:	e50b3010 	str	r3, [r11, #-16]
     af4:	ea000002 	b	b04 <ICDIPTR+0x304>
						if(volume<10){
							volume++;
						}
						keyReleased = 0;
					}
					break;
     af8:	e1a00000 	nop			; (mov r0, r0)
     afc:	ea000000 	b	b04 <ICDIPTR+0x304>
						if(volume>1){
							volume--;
						}
						keyReleased = 0;
					}
					break;
     b00:	e1a00000 	nop			; (mov r0, r0)
				default:
					keyReleased = 0;
			}
		}

		signalSum = generateSignal(keysPressed, t); //generate the signal at this t based on what keys were pressed
     b04:	e302003c 	movw	r0, #8252	; 0x203c
     b08:	e3400003 	movt	r0, #3
     b0c:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     b10:	ebfffe4f 	bl	454 <generateSignal>
     b14:	e14b02f4 	strd	r0, [r11, #-36]	; 0xffffffdc

		signalSum = volume * signalSum; //this is volume control
     b18:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     b1c:	eb000446 	bl	1c3c <__aeabi_i2d>
     b20:	e1a02000 	mov	r2, r0
     b24:	e1a03001 	mov	r3, r1
     b28:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     b2c:	eb000479 	bl	1d18 <__aeabi_dmul>
     b30:	e1a02000 	mov	r2, r0
     b34:	e1a03001 	mov	r3, r1
     b38:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc

		int drawIndex = 0;
     b3c:	e3a03000 	mov	r3, #0
     b40:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
		double valToDraw = 0;
     b44:	e3a02000 	mov	r2, #0
     b48:	e3a03000 	mov	r3, #0
     b4c:	e14b23f4 	strd	r2, [r11, #-52]	; 0xffffffcc
		// To reduce the number of drawing operations
		if((t%10 == 0)){
     b50:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     b54:	e3063667 	movw	r3, #26215	; 0x6667
     b58:	e3463666 	movt	r3, #26214	; 0x6666
     b5c:	e0c32193 	smull	r2, r3, r3, r1
     b60:	e1a02143 	asr	r2, r3, #2
     b64:	e1a03fc1 	asr	r3, r1, #31
     b68:	e0632002 	rsb	r2, r3, r2
     b6c:	e1a03002 	mov	r3, r2
     b70:	e1a03103 	lsl	r3, r3, #2
     b74:	e0833002 	add	r3, r3, r2
     b78:	e1a03083 	lsl	r3, r3, #1
     b7c:	e0632001 	rsb	r2, r3, r1
     b80:	e3520000 	cmp	r2, #0
     b84:	1a000059 	bne	cf0 <ICDICFR+0xf0>
			audio_write_data_ASM(signalSum, signalSum);
     b88:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     b8c:	eb000588 	bl	21b4 <__aeabi_d2iz>
     b90:	e1a04000 	mov	r4, r0
     b94:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     b98:	eb000585 	bl	21b4 <__aeabi_d2iz>
     b9c:	e1a03000 	mov	r3, r0
     ba0:	e1a00004 	mov	r0, r4
     ba4:	e1a01003 	mov	r1, r3
     ba8:	eb000114 	bl	1000 <audio_write_data_ASM>
			//draw volume number in bottom right
			if(volume == 10){
     bac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     bb0:	e353000a 	cmp	r3, #10
     bb4:	1a000004 	bne	bcc <ICDIPTR+0x3cc>
				VGA_write_byte_ASM(78, 59, 16);
     bb8:	e3a0004e 	mov	r0, #78	; 0x4e
     bbc:	e3a0103b 	mov	r1, #59	; 0x3b
     bc0:	e3a02010 	mov	r2, #16
     bc4:	eb000228 	bl	146c <VGA_write_byte_ASM>
     bc8:	ea000005 	b	be4 <ICDIPTR+0x3e4>
			} else {
				//volume = 0-9
				VGA_write_byte_ASM(78, 59, volume);
     bcc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     bd0:	e6ef3073 	uxtb	r3, r3
     bd4:	e3a0004e 	mov	r0, #78	; 0x4e
     bd8:	e3a0103b 	mov	r1, #59	; 0x3b
     bdc:	e1a02003 	mov	r2, r3
     be0:	eb000221 	bl	146c <VGA_write_byte_ASM>
			}

			drawIndex = (t/10)%320;
     be4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     be8:	e3063667 	movw	r3, #26215	; 0x6667
     bec:	e3463666 	movt	r3, #26214	; 0x6666
     bf0:	e0c31293 	smull	r1, r3, r3, r2
     bf4:	e1a01143 	asr	r1, r3, #2
     bf8:	e1a03fc2 	asr	r3, r2, #31
     bfc:	e0632001 	rsb	r2, r3, r1
     c00:	e3063667 	movw	r3, #26215	; 0x6667
     c04:	e3463666 	movt	r3, #26214	; 0x6666
     c08:	e0c31293 	smull	r1, r3, r3, r2
     c0c:	e1a013c3 	asr	r1, r3, #7
     c10:	e1a03fc2 	asr	r3, r2, #31
     c14:	e0631001 	rsb	r1, r3, r1
     c18:	e1a03001 	mov	r3, r1
     c1c:	e1a03103 	lsl	r3, r3, #2
     c20:	e0833001 	add	r3, r3, r1
     c24:	e1a03303 	lsl	r3, r3, #6
     c28:	e0633002 	rsb	r3, r3, r2
     c2c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
			//clear drawn points
			VGA_draw_point_ASM(drawIndex, history[drawIndex], 0);
     c30:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     c34:	e30f35d8 	movw	r3, #62936	; 0xf5d8
     c38:	e34f3fff 	movt	r3, #65535	; 0xffff
     c3c:	e1a02182 	lsl	r2, r2, #3
     c40:	e24b100c 	sub	r1, r11, #12
     c44:	e0812002 	add	r2, r1, r2
     c48:	e0823003 	add	r3, r2, r3
     c4c:	e1c320d0 	ldrd	r2, [r3]
     c50:	e1a00002 	mov	r0, r2
     c54:	e1a01003 	mov	r1, r3
     c58:	eb000555 	bl	21b4 <__aeabi_d2iz>
     c5c:	e1a03000 	mov	r3, r0
     c60:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     c64:	e1a01003 	mov	r1, r3
     c68:	e3a02000 	mov	r2, #0
     c6c:	eb000215 	bl	14c8 <VGA_draw_point_ASM>
			//120 centers the signal on the screen, 500000 is abitrary to make it fit
			valToDraw = 120 + signalSum/500000;
     c70:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     c74:	e3a02000 	mov	r2, #0
     c78:	e3083480 	movw	r3, #33920	; 0x8480
     c7c:	e344311e 	movt	r3, #16670	; 0x411e
     c80:	eb0004c8 	bl	1fa8 <__aeabi_ddiv>
     c84:	e1a02000 	mov	r2, r0
     c88:	e1a03001 	mov	r3, r1
     c8c:	e1a00002 	mov	r0, r2
     c90:	e1a01003 	mov	r1, r3
     c94:	e3a02000 	mov	r2, #0
     c98:	e3a03000 	mov	r3, #0
     c9c:	e344305e 	movt	r3, #16478	; 0x405e
     ca0:	eb000318 	bl	1908 <__adddf3>
     ca4:	e1a02000 	mov	r2, r0
     ca8:	e1a03001 	mov	r3, r1
     cac:	e14b23f4 	strd	r2, [r11, #-52]	; 0xffffffcc
			//add new points to history array
			history[drawIndex] = valToDraw;
     cb0:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     cb4:	e30f35d8 	movw	r3, #62936	; 0xf5d8
     cb8:	e34f3fff 	movt	r3, #65535	; 0xffff
     cbc:	e1a02182 	lsl	r2, r2, #3
     cc0:	e24b100c 	sub	r1, r11, #12
     cc4:	e0812002 	add	r2, r1, r2
     cc8:	e0821003 	add	r1, r2, r3
     ccc:	e14b23d4 	ldrd	r2, [r11, #-52]	; 0xffffffcc
     cd0:	e1c120f0 	strd	r2, [r1]
			//draw new points
			VGA_draw_point_ASM(drawIndex, valToDraw, 120);		
     cd4:	e14b03d4 	ldrd	r0, [r11, #-52]	; 0xffffffcc
     cd8:	eb000535 	bl	21b4 <__aeabi_d2iz>
     cdc:	e1a03000 	mov	r3, r0
     ce0:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     ce4:	e1a01003 	mov	r1, r3
     ce8:	e3a02078 	mov	r2, #120	; 0x78
     cec:	eb0001f5 	bl	14c8 <VGA_draw_point_ASM>
		}
		
		// Reset the signal
		signalSum = 0;
     cf0:	e3a02000 	mov	r2, #0
     cf4:	e3a03000 	mov	r3, #0
     cf8:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
		// Reset the counter
		if(t==48000){
     cfc:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     d00:	e30b3b80 	movw	r3, #48000	; 0xbb80
     d04:	e1520003 	cmp	r2, r3
     d08:	1a000002 	bne	d18 <ICDICFR+0x118>
			t=0;
     d0c:	e3a03000 	mov	r3, #0
     d10:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		}else{
			t++;
		}
		
	}
     d14:	eafffeb5 	b	7f0 <main+0x50>
		signalSum = 0;
		// Reset the counter
		if(t==48000){
			t=0;
		}else{
			t++;
     d18:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d1c:	e2833001 	add	r3, r3, #1
     d20:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		}
		
	}
     d24:	eafffeb1 	b	7f0 <main+0x50>

00000d28 <HEX_clear_ASM>:
     d28:	e3a01000 	mov	r1, #0
     d2c:	ea000004 	b	d44 <WRITE>

00000d30 <HEX_flood_ASM>:
     d30:	e3a0107f 	mov	r1, #127	; 0x7f
     d34:	ea000002 	b	d44 <WRITE>

00000d38 <HEX_write_ASM>:
     d38:	e59f2064 	ldr	r2, [pc, #100]	; da4 <PATTERNS+0x14>
     d3c:	e7d21001 	ldrb	r1, [r2, r1]
     d40:	eaffffff 	b	d44 <WRITE>

00000d44 <WRITE>:
     d44:	e92d0030 	push	{r4, r5}
     d48:	e59f2058 	ldr	r2, [pc, #88]	; da8 <PATTERNS+0x18>
     d4c:	e3a03000 	mov	r3, #0
     d50:	e3e050ff 	mvn	r5, #255	; 0xff

00000d54 <LOOP>:
     d54:	e3100001 	tst	r0, #1
     d58:	0a000003 	beq	d6c <CONTINUE>
     d5c:	e5924000 	ldr	r4, [r2]
     d60:	e0044005 	and	r4, r4, r5
     d64:	e1844001 	orr	r4, r4, r1
     d68:	e5824000 	str	r4, [r2]

00000d6c <CONTINUE>:
     d6c:	e1a05c65 	ror	r5, r5, #24
     d70:	e1a01c61 	ror	r1, r1, #24
     d74:	e2833001 	add	r3, r3, #1
     d78:	e3530004 	cmp	r3, #4
     d7c:	059f2028 	ldreq	r2, [pc, #40]	; dac <PATTERNS+0x1c>
     d80:	e1b000a0 	lsrs	r0, r0, #1
     d84:	1afffff2 	bne	d54 <LOOP>
     d88:	e8bd0030 	pop	{r4, r5}
     d8c:	e12fff1e 	bx	lr

00000d90 <PATTERNS>:
     d90:	4f5b063f 	.word	0x4f5b063f
     d94:	077d6d66 	.word	0x077d6d66
     d98:	7c776f7f 	.word	0x7c776f7f
     d9c:	71795e39 	.word	0x71795e39
     da0:	000000ff 	.word	0x000000ff
     da4:	00000d90 	.word	0x00000d90
     da8:	ff200020 	.word	0xff200020
     dac:	ff200030 	.word	0xff200030

00000db0 <HPS_TIM_config_ASM>:
     db0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     db4:	e3a01000 	mov	r1, #0
     db8:	e3a02001 	mov	r2, #1
     dbc:	e5907000 	ldr	r7, [r0]
     dc0:	eaffffff 	b	dc4 <LOOP>

00000dc4 <LOOP>:
     dc4:	e1170112 	tst	r7, r2, lsl r1
     dc8:	0a000000 	beq	dd0 <CONTINUE>
     dcc:	eb000004 	bl	de4 <CONFIG>

00000dd0 <CONTINUE>:
     dd0:	e2811001 	add	r1, r1, #1
     dd4:	e3510004 	cmp	r1, #4
     dd8:	bafffff9 	blt	dc4 <LOOP>

00000ddc <DONE>:
     ddc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     de0:	e12fff1e 	bx	lr

00000de4 <CONFIG>:
     de4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     de8:	e59f30e4 	ldr	r3, [pc, #228]	; ed4 <HPS_TIM_BASE+0x10>
     dec:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     df0:	eb000005 	bl	e0c <DISABLE>
     df4:	eb000008 	bl	e1c <SET_LOAD_VAL>
     df8:	eb00000e 	bl	e38 <SET_LOAD_BIT>
     dfc:	eb000013 	bl	e50 <SET_INT_BIT>
     e00:	eb000019 	bl	e6c <SET_EN_BIT>
     e04:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e08:	e12fff1e 	bx	lr

00000e0c <DISABLE>:
     e0c:	e5945008 	ldr	r5, [r4, #8]
     e10:	e3c55001 	bic	r5, r5, #1
     e14:	e5845008 	str	r5, [r4, #8]
     e18:	e12fff1e 	bx	lr

00000e1c <SET_LOAD_VAL>:
     e1c:	e5905004 	ldr	r5, [r0, #4]
     e20:	e3a06019 	mov	r6, #25
     e24:	e0050695 	mul	r5, r5, r6
     e28:	e3510002 	cmp	r1, #2
     e2c:	b1a05105 	lsllt	r5, r5, #2
     e30:	e5845000 	str	r5, [r4]
     e34:	e12fff1e 	bx	lr

00000e38 <SET_LOAD_BIT>:
     e38:	e5945008 	ldr	r5, [r4, #8]
     e3c:	e5906008 	ldr	r6, [r0, #8]
     e40:	e3c55002 	bic	r5, r5, #2
     e44:	e1855086 	orr	r5, r5, r6, lsl #1
     e48:	e5845008 	str	r5, [r4, #8]
     e4c:	e12fff1e 	bx	lr

00000e50 <SET_INT_BIT>:
     e50:	e5945008 	ldr	r5, [r4, #8]
     e54:	e590600c 	ldr	r6, [r0, #12]
     e58:	e2266001 	eor	r6, r6, #1
     e5c:	e3c55004 	bic	r5, r5, #4
     e60:	e1855106 	orr	r5, r5, r6, lsl #2
     e64:	e5845008 	str	r5, [r4, #8]
     e68:	e12fff1e 	bx	lr

00000e6c <SET_EN_BIT>:
     e6c:	e5945008 	ldr	r5, [r4, #8]
     e70:	e5906010 	ldr	r6, [r0, #16]
     e74:	e3c55001 	bic	r5, r5, #1
     e78:	e1855006 	orr	r5, r5, r6
     e7c:	e5845008 	str	r5, [r4, #8]
     e80:	e12fff1e 	bx	lr

00000e84 <HPS_TIM_clear_INT_ASM>:
     e84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e88:	e3a01000 	mov	r1, #0
     e8c:	e3a02001 	mov	r2, #1
     e90:	eaffffff 	b	e94 <INT_LOOP>

00000e94 <INT_LOOP>:
     e94:	e1100112 	tst	r0, r2, lsl r1
     e98:	0a000000 	beq	ea0 <INT_CONTINUE>
     e9c:	eb000004 	bl	eb4 <CLEAR_IT>

00000ea0 <INT_CONTINUE>:
     ea0:	e2811001 	add	r1, r1, #1
     ea4:	e3510004 	cmp	r1, #4
     ea8:	bafffff9 	blt	e94 <INT_LOOP>

00000eac <INT_DONE>:
     eac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     eb0:	e12fff1e 	bx	lr

00000eb4 <CLEAR_IT>:
     eb4:	e59f3018 	ldr	r3, [pc, #24]	; ed4 <HPS_TIM_BASE+0x10>
     eb8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     ebc:	e593300c 	ldr	r3, [r3, #12]
     ec0:	e12fff1e 	bx	lr

00000ec4 <HPS_TIM_BASE>:
     ec4:	ffc08000 	.word	0xffc08000
     ec8:	ffc09000 	.word	0xffc09000
     ecc:	ffd00000 	.word	0xffd00000
     ed0:	ffd01000 	.word	0xffd01000
     ed4:	00000ec4 	.word	0x00000ec4

00000ed8 <hps_tim0_int_flag>:
     ed8:	00000000 	.word	0x00000000

00000edc <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     edc:	e12fff1e 	bx	lr

00000ee0 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     ee0:	e12fff1e 	bx	lr

00000ee4 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	BX LR
     ee4:	e12fff1e 	bx	lr

00000ee8 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     ee8:	e12fff1e 	bx	lr

00000eec <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     eec:	e12fff1e 	bx	lr

00000ef0 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     ef0:	e12fff1e 	bx	lr

00000ef4 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     ef4:	e12fff1e 	bx	lr

00000ef8 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     ef8:	e12fff1e 	bx	lr

00000efc <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     efc:	e12fff1e 	bx	lr

00000f00 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     f00:	e12fff1e 	bx	lr

00000f04 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     f04:	e12fff1e 	bx	lr

00000f08 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     f08:	e12fff1e 	bx	lr

00000f0c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     f0c:	e12fff1e 	bx	lr

00000f10 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     f10:	e12fff1e 	bx	lr

00000f14 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     f14:	e12fff1e 	bx	lr

00000f18 <read_LEDs_ASM>:
     f18:	e59f1010 	ldr	r1, [pc, #16]	; f30 <write_LEDs_ASM+0xc>
     f1c:	e5910000 	ldr	r0, [r1]
     f20:	e12fff1e 	bx	lr

00000f24 <write_LEDs_ASM>:
     f24:	e59f1004 	ldr	r1, [pc, #4]	; f30 <write_LEDs_ASM+0xc>
     f28:	e5810000 	str	r0, [r1]
     f2c:	e12fff1e 	bx	lr
     f30:	ff200000 	.word	0xff200000

00000f34 <audio_read_data_ASM>:
     f34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f38:	e92d0003 	push	{r0, r1}
     f3c:	eb000093 	bl	1190 <audio_read_ralc_ASM>
     f40:	e3500000 	cmp	r0, #0
     f44:	08bd0003 	popeq	{r0, r1}
     f48:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f4c:	03a00000 	moveq	r0, #0
     f50:	012fff1e 	bxeq	lr
     f54:	eb000092 	bl	11a4 <audio_read_rarc_ASM>
     f58:	e3500000 	cmp	r0, #0
     f5c:	08bd0003 	popeq	{r0, r1}
     f60:	03a00000 	moveq	r0, #0
     f64:	012fff1e 	bxeq	lr
     f68:	e8bd0003 	pop	{r0, r1}
     f6c:	e59f2240 	ldr	r2, [pc, #576]	; 11b4 <audio_read_rarc_ASM+0x10>
     f70:	e5922000 	ldr	r2, [r2]
     f74:	e5802000 	str	r2, [r0]
     f78:	e59f3238 	ldr	r3, [pc, #568]	; 11b8 <audio_read_rarc_ASM+0x14>
     f7c:	e5933000 	ldr	r3, [r3]
     f80:	e5813000 	str	r3, [r1]
     f84:	e3a00001 	mov	r0, #1

00000f88 <audio_read_leftdata_ASM>:
     f88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f8c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f90:	eb00007e 	bl	1190 <audio_read_ralc_ASM>
     f94:	e3500000 	cmp	r0, #0
     f98:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f9c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fa0:	03a00000 	moveq	r0, #0
     fa4:	012fff1e 	bxeq	lr
     fa8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fac:	e59f2200 	ldr	r2, [pc, #512]	; 11b4 <audio_read_rarc_ASM+0x10>
     fb0:	e5922000 	ldr	r2, [r2]
     fb4:	e5802000 	str	r2, [r0]
     fb8:	e3a00001 	mov	r0, #1
     fbc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fc0:	e12fff1e 	bx	lr

00000fc4 <audio_read_rightdata_ASM>:
     fc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fc8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fcc:	eb000074 	bl	11a4 <audio_read_rarc_ASM>
     fd0:	e3500000 	cmp	r0, #0
     fd4:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fd8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fdc:	03a00000 	moveq	r0, #0
     fe0:	012fff1e 	bxeq	lr
     fe4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fe8:	e59f21c8 	ldr	r2, [pc, #456]	; 11b8 <audio_read_rarc_ASM+0x14>
     fec:	e5922000 	ldr	r2, [r2]
     ff0:	e5802000 	str	r2, [r0]
     ff4:	e3a00001 	mov	r0, #1
     ff8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     ffc:	e12fff1e 	bx	lr

00001000 <audio_write_data_ASM>:
    1000:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1004:	e92d0003 	push	{r0, r1}
    1008:	eb000056 	bl	1168 <audio_read_wslc_ASM>
    100c:	e3500000 	cmp	r0, #0
    1010:	08bd0003 	popeq	{r0, r1}
    1014:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1018:	03a00000 	moveq	r0, #0
    101c:	012fff1e 	bxeq	lr
    1020:	eb000055 	bl	117c <audio_read_wsrc_ASM>
    1024:	e3500000 	cmp	r0, #0
    1028:	08bd0003 	popeq	{r0, r1}
    102c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1030:	03a00000 	moveq	r0, #0
    1034:	012fff1e 	bxeq	lr
    1038:	e8bd0003 	pop	{r0, r1}
    103c:	e59f2170 	ldr	r2, [pc, #368]	; 11b4 <audio_read_rarc_ASM+0x10>
    1040:	e5820000 	str	r0, [r2]
    1044:	e59f316c 	ldr	r3, [pc, #364]	; 11b8 <audio_read_rarc_ASM+0x14>
    1048:	e5831000 	str	r1, [r3]
    104c:	e3a00001 	mov	r0, #1
    1050:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1054:	e12fff1e 	bx	lr

00001058 <audio_write_leftdata_ASM>:
    1058:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    105c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1060:	eb000040 	bl	1168 <audio_read_wslc_ASM>
    1064:	e3500000 	cmp	r0, #0
    1068:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    106c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1070:	03a00000 	moveq	r0, #0
    1074:	012fff1e 	bxeq	lr
    1078:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    107c:	e59f2130 	ldr	r2, [pc, #304]	; 11b4 <audio_read_rarc_ASM+0x10>
    1080:	e5820000 	str	r0, [r2]
    1084:	e3a00001 	mov	r0, #1
    1088:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    108c:	e12fff1e 	bx	lr

00001090 <audio_write_rightdata_ASM>:
    1090:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1094:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1098:	eb000037 	bl	117c <audio_read_wsrc_ASM>
    109c:	e3500000 	cmp	r0, #0
    10a0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    10a4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    10a8:	03a00000 	moveq	r0, #0
    10ac:	012fff1e 	bxeq	lr
    10b0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    10b4:	e59f20fc 	ldr	r2, [pc, #252]	; 11b8 <audio_read_rarc_ASM+0x14>
    10b8:	e5820000 	str	r0, [r2]
    10bc:	e3a00001 	mov	r0, #1
    10c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    10c4:	e12fff1e 	bx	lr

000010c8 <audio_enable_read_fifo_clear_ASM>:
    10c8:	e59f00ec 	ldr	r0, [pc, #236]	; 11bc <audio_read_rarc_ASM+0x18>
    10cc:	e5901000 	ldr	r1, [r0]
    10d0:	e3811004 	orr	r1, r1, #4
    10d4:	e5801000 	str	r1, [r0]
    10d8:	e12fff1e 	bx	lr

000010dc <audio_enable_write_fifo_clear_ASM>:
    10dc:	e59f00d8 	ldr	r0, [pc, #216]	; 11bc <audio_read_rarc_ASM+0x18>
    10e0:	e5901000 	ldr	r1, [r0]
    10e4:	e3811008 	orr	r1, r1, #8
    10e8:	e5801000 	str	r1, [r0]
    10ec:	e12fff1e 	bx	lr

000010f0 <audio_disable_read_fifo_clear_ASM>:
    10f0:	e59f00c4 	ldr	r0, [pc, #196]	; 11bc <audio_read_rarc_ASM+0x18>
    10f4:	e5901000 	ldr	r1, [r0]
    10f8:	e3c11004 	bic	r1, r1, #4
    10fc:	e5801000 	str	r1, [r0]
    1100:	e12fff1e 	bx	lr

00001104 <audio_disable_write_fifo_clear_ASM>:
    1104:	e59f00b0 	ldr	r0, [pc, #176]	; 11bc <audio_read_rarc_ASM+0x18>
    1108:	e5901000 	ldr	r1, [r0]
    110c:	e3c11008 	bic	r1, r1, #8
    1110:	e5801000 	str	r1, [r0]
    1114:	e12fff1e 	bx	lr

00001118 <audio_enable_read_int_ASM>:
    1118:	e59f009c 	ldr	r0, [pc, #156]	; 11bc <audio_read_rarc_ASM+0x18>
    111c:	e5901000 	ldr	r1, [r0]
    1120:	e3811001 	orr	r1, r1, #1
    1124:	e5801000 	str	r1, [r0]
    1128:	e12fff1e 	bx	lr

0000112c <audio_enable_write_int_ASM>:
    112c:	e59f0088 	ldr	r0, [pc, #136]	; 11bc <audio_read_rarc_ASM+0x18>
    1130:	e5901000 	ldr	r1, [r0]
    1134:	e3811002 	orr	r1, r1, #2
    1138:	e5801000 	str	r1, [r0]
    113c:	e12fff1e 	bx	lr

00001140 <audio_disable_read_int_ASM>:
    1140:	e59f0074 	ldr	r0, [pc, #116]	; 11bc <audio_read_rarc_ASM+0x18>
    1144:	e5901000 	ldr	r1, [r0]
    1148:	e3c11001 	bic	r1, r1, #1
    114c:	e5801000 	str	r1, [r0]
    1150:	e12fff1e 	bx	lr

00001154 <audio_disable_write_int_ASM>:
    1154:	e59f0060 	ldr	r0, [pc, #96]	; 11bc <audio_read_rarc_ASM+0x18>
    1158:	e5901000 	ldr	r1, [r0]
    115c:	e3c11002 	bic	r1, r1, #2
    1160:	e5801000 	str	r1, [r0]
    1164:	e12fff1e 	bx	lr

00001168 <audio_read_wslc_ASM>:
    1168:	e59f0050 	ldr	r0, [pc, #80]	; 11c0 <audio_read_rarc_ASM+0x1c>
    116c:	e5900000 	ldr	r0, [r0]
    1170:	e1a00c20 	lsr	r0, r0, #24
    1174:	e20000ff 	and	r0, r0, #255	; 0xff
    1178:	e12fff1e 	bx	lr

0000117c <audio_read_wsrc_ASM>:
    117c:	e59f003c 	ldr	r0, [pc, #60]	; 11c0 <audio_read_rarc_ASM+0x1c>
    1180:	e5900000 	ldr	r0, [r0]
    1184:	e1a00820 	lsr	r0, r0, #16
    1188:	e20000ff 	and	r0, r0, #255	; 0xff
    118c:	e12fff1e 	bx	lr

00001190 <audio_read_ralc_ASM>:
    1190:	e59f0028 	ldr	r0, [pc, #40]	; 11c0 <audio_read_rarc_ASM+0x1c>
    1194:	e5900000 	ldr	r0, [r0]
    1198:	e1a00420 	lsr	r0, r0, #8
    119c:	e20000ff 	and	r0, r0, #255	; 0xff
    11a0:	e12fff1e 	bx	lr

000011a4 <audio_read_rarc_ASM>:
    11a4:	e59f0014 	ldr	r0, [pc, #20]	; 11c0 <audio_read_rarc_ASM+0x1c>
    11a8:	e5900000 	ldr	r0, [r0]
    11ac:	e20000ff 	and	r0, r0, #255	; 0xff
    11b0:	e12fff1e 	bx	lr
    11b4:	ff203048 	.word	0xff203048
    11b8:	ff20304c 	.word	0xff20304c
    11bc:	ff203040 	.word	0xff203040
    11c0:	ff203044 	.word	0xff203044

000011c4 <read_ps2_data_ASM>:
    11c4:	e59f114c 	ldr	r1, [pc, #332]	; 1318 <ps2_fifo_ravail+0x4>
    11c8:	e5911000 	ldr	r1, [r1]
    11cc:	e3a02902 	mov	r2, #32768	; 0x8000
    11d0:	e1110002 	tst	r1, r2
    11d4:	03a00000 	moveq	r0, #0
    11d8:	012fff1e 	bxeq	lr
    11dc:	e20120ff 	and	r2, r1, #255	; 0xff
    11e0:	e5c02000 	strb	r2, [r0]
    11e4:	e59f2130 	ldr	r2, [pc, #304]	; 131c <ps2_fifo_ravail+0x8>
    11e8:	e0010002 	and	r0, r1, r2
    11ec:	e1a00820 	lsr	r0, r0, #16
    11f0:	e12fff1e 	bx	lr

000011f4 <enable_ps2_int_ASM>:
    11f4:	e59f011c 	ldr	r0, [pc, #284]	; 1318 <ps2_fifo_ravail+0x4>
    11f8:	e3a01001 	mov	r1, #1
    11fc:	e5c01004 	strb	r1, [r0, #4]
    1200:	e12fff1e 	bx	lr

00001204 <disable_ps2_int_ASM>:
    1204:	e59f010c 	ldr	r0, [pc, #268]	; 1318 <ps2_fifo_ravail+0x4>
    1208:	e3a01000 	mov	r1, #0
    120c:	e5c01004 	strb	r1, [r0, #4]
    1210:	e12fff1e 	bx	lr

00001214 <ps2_fifo_data>:
	...

00001314 <ps2_fifo_ravail>:
    1314:	00000000 	.word	0x00000000
    1318:	ff200100 	.word	0xff200100
    131c:	ffff0000 	.word	0xffff0000

00001320 <read_PB_data_ASM>:
    1320:	e59f1074 	ldr	r1, [pc, #116]	; 139c <disable_PB_INT_ASM+0x14>
    1324:	e5910000 	ldr	r0, [r1]
    1328:	e12fff1e 	bx	lr

0000132c <PB_data_is_pressed_ASM>:
    132c:	e59f1068 	ldr	r1, [pc, #104]	; 139c <disable_PB_INT_ASM+0x14>
    1330:	e5912000 	ldr	r2, [r1]
    1334:	e0000002 	and	r0, r0, r2
    1338:	e3300000 	teq	r0, #0
    133c:	13a00001 	movne	r0, #1
    1340:	e12fff1e 	bx	lr

00001344 <read_PB_edgecap_ASM>:
    1344:	e59f1054 	ldr	r1, [pc, #84]	; 13a0 <disable_PB_INT_ASM+0x18>
    1348:	e5910000 	ldr	r0, [r1]
    134c:	e12fff1e 	bx	lr

00001350 <PB_edgecap_is_pressed_ASM>:
    1350:	e59f1048 	ldr	r1, [pc, #72]	; 13a0 <disable_PB_INT_ASM+0x18>
    1354:	e5912000 	ldr	r2, [r1]
    1358:	e0000002 	and	r0, r0, r2
    135c:	e3300000 	teq	r0, #0
    1360:	13a00001 	movne	r0, #1
    1364:	e12fff1e 	bx	lr

00001368 <PB_clear_edgecp_ASM>:
    1368:	e59f1030 	ldr	r1, [pc, #48]	; 13a0 <disable_PB_INT_ASM+0x18>
    136c:	e5810000 	str	r0, [r1]
    1370:	e12fff1e 	bx	lr

00001374 <enable_PB_INT_ASM>:
    1374:	e59f1028 	ldr	r1, [pc, #40]	; 13a4 <disable_PB_INT_ASM+0x1c>
    1378:	e5912000 	ldr	r2, [r1]
    137c:	e1800002 	orr	r0, r0, r2
    1380:	e5810000 	str	r0, [r1]
    1384:	e12fff1e 	bx	lr

00001388 <disable_PB_INT_ASM>:
    1388:	e59f1014 	ldr	r1, [pc, #20]	; 13a4 <disable_PB_INT_ASM+0x1c>
    138c:	e5912000 	ldr	r2, [r1]
    1390:	e1c00002 	bic	r0, r0, r2
    1394:	e5810000 	str	r0, [r1]
    1398:	e12fff1e 	bx	lr
    139c:	ff200050 	.word	0xff200050
    13a0:	ff20005c 	.word	0xff20005c
    13a4:	ff200058 	.word	0xff200058

000013a8 <read_slider_switches_ASM>:
    13a8:	e59f1004 	ldr	r1, [pc, #4]	; 13b4 <read_slider_switches_ASM+0xc>
    13ac:	e5910000 	ldr	r0, [r1]
    13b0:	e12fff1e 	bx	lr
    13b4:	ff200040 	.word	0xff200040

000013b8 <VGA_clear_charbuff_ASM>:
    13b8:	e92d0030 	push	{r4, r5}
    13bc:	e3a02000 	mov	r2, #0
    13c0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13c4:	e3a00000 	mov	r0, #0

000013c8 <CHAR_LOOPX>:
    13c8:	e3a01000 	mov	r1, #0
    13cc:	e0834000 	add	r4, r3, r0

000013d0 <CHAR_LOOPY>:
    13d0:	e0845381 	add	r5, r4, r1, lsl #7
    13d4:	e5c52000 	strb	r2, [r5]
    13d8:	e2811001 	add	r1, r1, #1
    13dc:	e351003c 	cmp	r1, #60	; 0x3c
    13e0:	bafffffa 	blt	13d0 <CHAR_LOOPY>
    13e4:	e2800001 	add	r0, r0, #1
    13e8:	e3500050 	cmp	r0, #80	; 0x50
    13ec:	bafffff5 	blt	13c8 <CHAR_LOOPX>
    13f0:	e8bd0030 	pop	{r4, r5}
    13f4:	e12fff1e 	bx	lr

000013f8 <VGA_clear_pixelbuff_ASM>:
    13f8:	e92d0030 	push	{r4, r5}
    13fc:	e3a02000 	mov	r2, #0
    1400:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1404:	e3a00000 	mov	r0, #0

00001408 <PIXEL_LOOPX>:
    1408:	e3a01000 	mov	r1, #0
    140c:	e0834080 	add	r4, r3, r0, lsl #1

00001410 <PIXEL_LOOPY>:
    1410:	e0845501 	add	r5, r4, r1, lsl #10
    1414:	e1c520b0 	strh	r2, [r5]
    1418:	e2811001 	add	r1, r1, #1
    141c:	e35100f0 	cmp	r1, #240	; 0xf0
    1420:	bafffffa 	blt	1410 <PIXEL_LOOPY>
    1424:	e2800001 	add	r0, r0, #1
    1428:	e3500d05 	cmp	r0, #320	; 0x140
    142c:	bafffff5 	blt	1408 <PIXEL_LOOPX>
    1430:	e8bd0030 	pop	{r4, r5}
    1434:	e12fff1e 	bx	lr

00001438 <VGA_write_char_ASM>:
    1438:	e3500000 	cmp	r0, #0
    143c:	b12fff1e 	bxlt	lr
    1440:	e3510000 	cmp	r1, #0
    1444:	b12fff1e 	bxlt	lr
    1448:	e350004f 	cmp	r0, #79	; 0x4f
    144c:	c12fff1e 	bxgt	lr
    1450:	e351003b 	cmp	r1, #59	; 0x3b
    1454:	c12fff1e 	bxgt	lr
    1458:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    145c:	e0833000 	add	r3, r3, r0
    1460:	e0833381 	add	r3, r3, r1, lsl #7
    1464:	e5c32000 	strb	r2, [r3]
    1468:	e12fff1e 	bx	lr

0000146c <VGA_write_byte_ASM>:
    146c:	e3500000 	cmp	r0, #0
    1470:	b12fff1e 	bxlt	lr
    1474:	e3510000 	cmp	r1, #0
    1478:	b12fff1e 	bxlt	lr
    147c:	e350004e 	cmp	r0, #78	; 0x4e
    1480:	c12fff1e 	bxgt	lr
    1484:	e351003b 	cmp	r1, #59	; 0x3b
    1488:	c12fff1e 	bxgt	lr
    148c:	e92d0030 	push	{r4, r5}
    1490:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1494:	e20250f0 	and	r5, r2, #240	; 0xf0
    1498:	e1a05225 	lsr	r5, r5, #4
    149c:	e202400f 	and	r4, r2, #15
    14a0:	e59f2068 	ldr	r2, [pc, #104]	; 1510 <HEX_ASCII+0x10>
    14a4:	e7d25005 	ldrb	r5, [r2, r5]
    14a8:	e7d24004 	ldrb	r4, [r2, r4]
    14ac:	e0833000 	add	r3, r3, r0
    14b0:	e0833381 	add	r3, r3, r1, lsl #7
    14b4:	e5c35000 	strb	r5, [r3]
    14b8:	e2833001 	add	r3, r3, #1
    14bc:	e5c34000 	strb	r4, [r3]
    14c0:	e8bd0030 	pop	{r4, r5}
    14c4:	e12fff1e 	bx	lr

000014c8 <VGA_draw_point_ASM>:
    14c8:	e59f3044 	ldr	r3, [pc, #68]	; 1514 <HEX_ASCII+0x14>
    14cc:	e3500000 	cmp	r0, #0
    14d0:	b12fff1e 	bxlt	lr
    14d4:	e3510000 	cmp	r1, #0
    14d8:	b12fff1e 	bxlt	lr
    14dc:	e1500003 	cmp	r0, r3
    14e0:	c12fff1e 	bxgt	lr
    14e4:	e35100ef 	cmp	r1, #239	; 0xef
    14e8:	c12fff1e 	bxgt	lr
    14ec:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    14f0:	e0833080 	add	r3, r3, r0, lsl #1
    14f4:	e0833501 	add	r3, r3, r1, lsl #10
    14f8:	e1c320b0 	strh	r2, [r3]
    14fc:	e12fff1e 	bx	lr

00001500 <HEX_ASCII>:
    1500:	33323130 	.word	0x33323130
    1504:	37363534 	.word	0x37363534
    1508:	42413938 	.word	0x42413938
    150c:	46454443 	.word	0x46454443
    1510:	00001500 	.word	0x00001500
    1514:	0000013f 	.word	0x0000013f

00001518 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1518:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    151c:	e28db000 	add	r11, sp, #0
    1520:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    1524:	e3a030d3 	mov	r3, #211	; 0xd3
    1528:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    152c:	e51b3008 	ldr	r3, [r11, #-8]
    1530:	e129f003 	msr	CPSR_fc, r3
}
    1534:	e28bd000 	add	sp, r11, #0
    1538:	e8bd0800 	ldmfd	sp!, {r11}
    153c:	e12fff1e 	bx	lr

00001540 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    1540:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1544:	e28db000 	add	r11, sp, #0
    1548:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    154c:	e3a03053 	mov	r3, #83	; 0x53
    1550:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1554:	e51b3008 	ldr	r3, [r11, #-8]
    1558:	e129f003 	msr	CPSR_fc, r3
}
    155c:	e28bd000 	add	sp, r11, #0
    1560:	e8bd0800 	ldmfd	sp!, {r11}
    1564:	e12fff1e 	bx	lr

00001568 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    1568:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    156c:	e28db000 	add	r11, sp, #0
    1570:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    1574:	e3e03007 	mvn	r3, #7
    1578:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    157c:	e3a030d2 	mov	r3, #210	; 0xd2
    1580:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1584:	e51b300c 	ldr	r3, [r11, #-12]
    1588:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    158c:	e51b3008 	ldr	r3, [r11, #-8]
    1590:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    1594:	e3a030d3 	mov	r3, #211	; 0xd3
    1598:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    159c:	e51b300c 	ldr	r3, [r11, #-12]
    15a0:	e129f003 	msr	CPSR_fc, r3
}
    15a4:	e28bd000 	add	sp, r11, #0
    15a8:	e8bd0800 	ldmfd	sp!, {r11}
    15ac:	e12fff1e 	bx	lr

000015b0 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    15b0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    15b4:	e28db000 	add	r11, sp, #0
    15b8:	e24dd01c 	sub	sp, sp, #28
    15bc:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    15c0:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    15c4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    15c8:	e1a031c3 	asr	r3, r3, #3
    15cc:	e3c33003 	bic	r3, r3, #3
    15d0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    15d4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    15d8:	e203301f 	and	r3, r3, #31
    15dc:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    15e0:	e3a02001 	mov	r2, #1
    15e4:	e51b300c 	ldr	r3, [r11, #-12]
    15e8:	e1a03312 	lsl	r3, r2, r3
    15ec:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    15f0:	e51b3008 	ldr	r3, [r11, #-8]
    15f4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    15f8:	e2433c03 	sub	r3, r3, #768	; 0x300
    15fc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1600:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1604:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1608:	e5921000 	ldr	r1, [r2]
    160c:	e51b2010 	ldr	r2, [r11, #-16]
    1610:	e1812002 	orr	r2, r1, r2
    1614:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1618:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    161c:	e3c33003 	bic	r3, r3, #3
    1620:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    1624:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1628:	e2033003 	and	r3, r3, #3
    162c:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1630:	e51b2008 	ldr	r2, [r11, #-8]
    1634:	e51b300c 	ldr	r3, [r11, #-12]
    1638:	e0823003 	add	r3, r2, r3
    163c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1640:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    1644:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1648:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    164c:	e6ef2072 	uxtb	r2, r2
    1650:	e5c32000 	strb	r2, [r3]
}
    1654:	e28bd000 	add	sp, r11, #0
    1658:	e8bd0800 	ldmfd	sp!, {r11}
    165c:	e12fff1e 	bx	lr

00001660 <config_GIC>:

void config_GIC(int len, int* IDs) {
    1660:	e92d4800 	push	{r11, lr}
    1664:	e28db004 	add	r11, sp, #4
    1668:	e24dd010 	sub	sp, sp, #16
    166c:	e50b0010 	str	r0, [r11, #-16]
    1670:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1674:	e3a03000 	mov	r3, #0
    1678:	e50b3008 	str	r3, [r11, #-8]
    167c:	ea00000a 	b	16ac <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    1680:	e51b3008 	ldr	r3, [r11, #-8]
    1684:	e1a03103 	lsl	r3, r3, #2
    1688:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    168c:	e0823003 	add	r3, r2, r3
    1690:	e5933000 	ldr	r3, [r3]
    1694:	e1a00003 	mov	r0, r3
    1698:	e3a01001 	mov	r1, #1
    169c:	ebffffc3 	bl	15b0 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    16a0:	e51b3008 	ldr	r3, [r11, #-8]
    16a4:	e2833001 	add	r3, r3, #1
    16a8:	e50b3008 	str	r3, [r11, #-8]
    16ac:	e51b2008 	ldr	r2, [r11, #-8]
    16b0:	e51b3010 	ldr	r3, [r11, #-16]
    16b4:	e1520003 	cmp	r2, r3
    16b8:	bafffff0 	blt	1680 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    16bc:	e30c3104 	movw	r3, #49412	; 0xc104
    16c0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    16c4:	e30f2fff 	movw	r2, #65535	; 0xffff
    16c8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    16cc:	e3a03cc1 	mov	r3, #49408	; 0xc100
    16d0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    16d4:	e3a02001 	mov	r2, #1
    16d8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    16dc:	e3a03a0d 	mov	r3, #53248	; 0xd000
    16e0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    16e4:	e3a02001 	mov	r2, #1
    16e8:	e5832000 	str	r2, [r3]
}
    16ec:	e24bd004 	sub	sp, r11, #4
    16f0:	e8bd8800 	pop	{r11, pc}

000016f4 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    16f4:	e24ee004 	sub	lr, lr, #4
    16f8:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    16fc:	e28db018 	add	r11, sp, #24
    1700:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1704:	e30c310c 	movw	r3, #49420	; 0xc10c
    1708:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    170c:	e5933000 	ldr	r3, [r3]
    1710:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    1714:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1718:	e3530053 	cmp	r3, #83	; 0x53
    171c:	0a00003d 	beq	1818 <__cs3_isr_irq+0x124>
    1720:	e3530053 	cmp	r3, #83	; 0x53
    1724:	ca000011 	bgt	1770 <__cs3_isr_irq+0x7c>
    1728:	e353004e 	cmp	r3, #78	; 0x4e
    172c:	0a000031 	beq	17f8 <__cs3_isr_irq+0x104>
    1730:	e353004e 	cmp	r3, #78	; 0x4e
    1734:	ca000006 	bgt	1754 <__cs3_isr_irq+0x60>
    1738:	e3530048 	cmp	r3, #72	; 0x48
    173c:	0a000029 	beq	17e8 <__cs3_isr_irq+0xf4>
    1740:	e3530049 	cmp	r3, #73	; 0x49
    1744:	0a000029 	beq	17f0 <__cs3_isr_irq+0xfc>
    1748:	e353001d 	cmp	r3, #29
    174c:	0a000019 	beq	17b8 <__cs3_isr_irq+0xc4>
    1750:	ea000036 	b	1830 <__cs3_isr_irq+0x13c>
    1754:	e3530050 	cmp	r3, #80	; 0x50
    1758:	0a00002a 	beq	1808 <__cs3_isr_irq+0x114>
    175c:	e3530050 	cmp	r3, #80	; 0x50
    1760:	ba000026 	blt	1800 <__cs3_isr_irq+0x10c>
    1764:	e3530051 	cmp	r3, #81	; 0x51
    1768:	0a000028 	beq	1810 <__cs3_isr_irq+0x11c>
    176c:	ea00002f 	b	1830 <__cs3_isr_irq+0x13c>
    1770:	e35300c7 	cmp	r3, #199	; 0xc7
    1774:	0a000013 	beq	17c8 <__cs3_isr_irq+0xd4>
    1778:	e35300c7 	cmp	r3, #199	; 0xc7
    177c:	ca000006 	bgt	179c <__cs3_isr_irq+0xa8>
    1780:	e3530059 	cmp	r3, #89	; 0x59
    1784:	0a000027 	beq	1828 <__cs3_isr_irq+0x134>
    1788:	e35300c5 	cmp	r3, #197	; 0xc5
    178c:	0a00000b 	beq	17c0 <__cs3_isr_irq+0xcc>
    1790:	e3530054 	cmp	r3, #84	; 0x54
    1794:	0a000021 	beq	1820 <__cs3_isr_irq+0x12c>
    1798:	ea000024 	b	1830 <__cs3_isr_irq+0x13c>
    179c:	e35300c9 	cmp	r3, #201	; 0xc9
    17a0:	0a00000c 	beq	17d8 <__cs3_isr_irq+0xe4>
    17a4:	e35300c9 	cmp	r3, #201	; 0xc9
    17a8:	ba000008 	blt	17d0 <__cs3_isr_irq+0xdc>
    17ac:	e35300ca 	cmp	r3, #202	; 0xca
    17b0:	0a00000a 	beq	17e0 <__cs3_isr_irq+0xec>
    17b4:	ea00001d 	b	1830 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    17b8:	ebfffdc7 	bl	edc <A9_PRIV_TIM_ISR>
    17bc:	ea00001c 	b	1834 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    17c0:	ebfffdc6 	bl	ee0 <HPS_GPIO1_ISR>
    17c4:	ea00001a 	b	1834 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    17c8:	ebfffdc5 	bl	ee4 <HPS_TIM0_ISR>
    17cc:	ea000018 	b	1834 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    17d0:	ebfffdc4 	bl	ee8 <HPS_TIM1_ISR>
    17d4:	ea000016 	b	1834 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    17d8:	ebfffdc3 	bl	eec <HPS_TIM2_ISR>
    17dc:	ea000014 	b	1834 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    17e0:	ebfffdc2 	bl	ef0 <HPS_TIM3_ISR>
    17e4:	ea000012 	b	1834 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    17e8:	ebfffdc1 	bl	ef4 <FPGA_INTERVAL_TIM_ISR>
    17ec:	ea000010 	b	1834 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    17f0:	ebfffdc0 	bl	ef8 <FPGA_PB_KEYS_ISR>
    17f4:	ea00000e 	b	1834 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    17f8:	ebfffdbf 	bl	efc <FPGA_Audio_ISR>
    17fc:	ea00000c 	b	1834 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1800:	ebfffdbe 	bl	f00 <FPGA_PS2_ISR>
    1804:	ea00000a 	b	1834 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1808:	ebfffdbd 	bl	f04 <FPGA_JTAG_ISR>
    180c:	ea000008 	b	1834 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1810:	ebfffdbc 	bl	f08 <FPGA_IrDA_ISR>
    1814:	ea000006 	b	1834 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1818:	ebfffdbb 	bl	f0c <FPGA_JP1_ISR>
    181c:	ea000004 	b	1834 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1820:	ebfffdba 	bl	f10 <FPGA_JP2_ISR>
    1824:	ea000002 	b	1834 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1828:	ebfffdb9 	bl	f14 <FPGA_PS2_DUAL_ISR>
    182c:	ea000000 	b	1834 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1830:	eafffffe 	b	1830 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    1834:	e30c3110 	movw	r3, #49424	; 0xc110
    1838:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    183c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1840:	e5832000 	str	r2, [r3]
}
    1844:	e24bd018 	sub	sp, r11, #24
    1848:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

0000184c <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    184c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1850:	e28db000 	add	r11, sp, #0
	while(1);
    1854:	eafffffe 	b	1854 <__cs3_reset+0x8>

00001858 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1858:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    185c:	e28db000 	add	r11, sp, #0
	while(1);
    1860:	eafffffe 	b	1860 <__cs3_isr_undef+0x8>

00001864 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    1864:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1868:	e28db000 	add	r11, sp, #0
	while(1);
    186c:	eafffffe 	b	186c <__cs3_isr_swi+0x8>

00001870 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1870:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1874:	e28db000 	add	r11, sp, #0
	while(1);
    1878:	eafffffe 	b	1878 <__cs3_isr_pabort+0x8>

0000187c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    187c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1880:	e28db000 	add	r11, sp, #0
	while(1);
    1884:	eafffffe 	b	1884 <__cs3_isr_dabort+0x8>

00001888 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1888:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    188c:	e28db000 	add	r11, sp, #0
	while(1);
    1890:	eafffffe 	b	1890 <__cs3_isr_fiq+0x8>

00001894 <fix_bug>:
}

void fix_bug() {
    1894:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1898:	e28db000 	add	r11, sp, #0
    189c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    18a0:	e30d3198 	movw	r3, #53656	; 0xd198
    18a4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    18a8:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    18ac:	e51b3008 	ldr	r3, [r11, #-8]
    18b0:	e3a02703 	mov	r2, #786432	; 0xc0000
    18b4:	e5832000 	str	r2, [r3]
}
    18b8:	e28bd000 	add	sp, r11, #0
    18bc:	e8bd0800 	ldmfd	sp!, {r11}
    18c0:	e12fff1e 	bx	lr

000018c4 <int_setup>:

void int_setup(int len, int* IDs) {
    18c4:	e92d4800 	push	{r11, lr}
    18c8:	e28db004 	add	r11, sp, #4
    18cc:	e24dd008 	sub	sp, sp, #8
    18d0:	e50b0008 	str	r0, [r11, #-8]
    18d4:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    18d8:	ebffff0e 	bl	1518 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    18dc:	ebffff21 	bl	1568 <set_A9_IRQ_stack>
	fix_bug();
    18e0:	ebffffeb 	bl	1894 <fix_bug>
	config_GIC(len, IDs);
    18e4:	e51b0008 	ldr	r0, [r11, #-8]
    18e8:	e51b100c 	ldr	r1, [r11, #-12]
    18ec:	ebffff5b 	bl	1660 <config_GIC>
	enable_A9_interrupts();
    18f0:	ebffff12 	bl	1540 <enable_A9_interrupts>
}
    18f4:	e24bd004 	sub	sp, r11, #4
    18f8:	e8bd8800 	pop	{r11, pc}

000018fc <__aeabi_drsub>:
    18fc:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1900:	ea000000 	b	1908 <__adddf3>

00001904 <__aeabi_dsub>:
    1904:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001908 <__adddf3>:
    1908:	e92d4030 	push	{r4, r5, lr}
    190c:	e1a04081 	lsl	r4, r1, #1
    1910:	e1a05083 	lsl	r5, r3, #1
    1914:	e1340005 	teq	r4, r5
    1918:	01300002 	teqeq	r0, r2
    191c:	1194c000 	orrsne	r12, r4, r0
    1920:	1195c002 	orrsne	r12, r5, r2
    1924:	11f0cac4 	mvnsne	r12, r4, asr #21
    1928:	11f0cac5 	mvnsne	r12, r5, asr #21
    192c:	0a00008c 	beq	1b64 <__adddf3+0x25c>
    1930:	e1a04aa4 	lsr	r4, r4, #21
    1934:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1938:	b2655000 	rsblt	r5, r5, #0
    193c:	da000006 	ble	195c <__adddf3+0x54>
    1940:	e0844005 	add	r4, r4, r5
    1944:	e0202002 	eor	r2, r0, r2
    1948:	e0213003 	eor	r3, r1, r3
    194c:	e0220000 	eor	r0, r2, r0
    1950:	e0231001 	eor	r1, r3, r1
    1954:	e0202002 	eor	r2, r0, r2
    1958:	e0213003 	eor	r3, r1, r3
    195c:	e3550036 	cmp	r5, #54	; 0x36
    1960:	88bd4030 	pophi	{r4, r5, lr}
    1964:	812fff1e 	bxhi	lr
    1968:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    196c:	e1a01601 	lsl	r1, r1, #12
    1970:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1974:	e18c1621 	orr	r1, r12, r1, lsr #12
    1978:	0a000001 	beq	1984 <__adddf3+0x7c>
    197c:	e2700000 	rsbs	r0, r0, #0
    1980:	e2e11000 	rsc	r1, r1, #0
    1984:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1988:	e1a03603 	lsl	r3, r3, #12
    198c:	e18c3623 	orr	r3, r12, r3, lsr #12
    1990:	0a000001 	beq	199c <__adddf3+0x94>
    1994:	e2722000 	rsbs	r2, r2, #0
    1998:	e2e33000 	rsc	r3, r3, #0
    199c:	e1340005 	teq	r4, r5
    19a0:	0a000069 	beq	1b4c <__adddf3+0x244>
    19a4:	e2444001 	sub	r4, r4, #1
    19a8:	e275e020 	rsbs	lr, r5, #32
    19ac:	ba000005 	blt	19c8 <__adddf3+0xc0>
    19b0:	e1a0ce12 	lsl	r12, r2, lr
    19b4:	e0900532 	adds	r0, r0, r2, lsr r5
    19b8:	e2a11000 	adc	r1, r1, #0
    19bc:	e0900e13 	adds	r0, r0, r3, lsl lr
    19c0:	e0b11553 	adcs	r1, r1, r3, asr r5
    19c4:	ea000006 	b	19e4 <__adddf3+0xdc>
    19c8:	e2455020 	sub	r5, r5, #32
    19cc:	e28ee020 	add	lr, lr, #32
    19d0:	e3520001 	cmp	r2, #1
    19d4:	e1a0ce13 	lsl	r12, r3, lr
    19d8:	238cc002 	orrcs	r12, r12, #2
    19dc:	e0900553 	adds	r0, r0, r3, asr r5
    19e0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    19e4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    19e8:	5a000002 	bpl	19f8 <__adddf3+0xf0>
    19ec:	e27cc000 	rsbs	r12, r12, #0
    19f0:	e2f00000 	rscs	r0, r0, #0
    19f4:	e2e11000 	rsc	r1, r1, #0
    19f8:	e3510601 	cmp	r1, #1048576	; 0x100000
    19fc:	3a00000f 	bcc	1a40 <__adddf3+0x138>
    1a00:	e3510602 	cmp	r1, #2097152	; 0x200000
    1a04:	3a000006 	bcc	1a24 <__adddf3+0x11c>
    1a08:	e1b010a1 	lsrs	r1, r1, #1
    1a0c:	e1b00060 	rrxs	r0, r0
    1a10:	e1a0c06c 	rrx	r12, r12
    1a14:	e2844001 	add	r4, r4, #1
    1a18:	e1a02a84 	lsl	r2, r4, #21
    1a1c:	e3720501 	cmn	r2, #4194304	; 0x400000
    1a20:	2a00006b 	bcs	1bd4 <__adddf3+0x2cc>
    1a24:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1a28:	01b0c0a0 	lsrseq	r12, r0, #1
    1a2c:	e2b00000 	adcs	r0, r0, #0
    1a30:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1a34:	e1811005 	orr	r1, r1, r5
    1a38:	e8bd4030 	pop	{r4, r5, lr}
    1a3c:	e12fff1e 	bx	lr
    1a40:	e1b0c08c 	lsls	r12, r12, #1
    1a44:	e0b00000 	adcs	r0, r0, r0
    1a48:	e0a11001 	adc	r1, r1, r1
    1a4c:	e3110601 	tst	r1, #1048576	; 0x100000
    1a50:	e2444001 	sub	r4, r4, #1
    1a54:	1afffff2 	bne	1a24 <__adddf3+0x11c>
    1a58:	e3310000 	teq	r1, #0
    1a5c:	13a03014 	movne	r3, #20
    1a60:	03a03034 	moveq	r3, #52	; 0x34
    1a64:	01a01000 	moveq	r1, r0
    1a68:	03a00000 	moveq	r0, #0
    1a6c:	e1a02001 	mov	r2, r1
    1a70:	e3520801 	cmp	r2, #65536	; 0x10000
    1a74:	21a02822 	lsrcs	r2, r2, #16
    1a78:	22433010 	subcs	r3, r3, #16
    1a7c:	e3520c01 	cmp	r2, #256	; 0x100
    1a80:	21a02422 	lsrcs	r2, r2, #8
    1a84:	22433008 	subcs	r3, r3, #8
    1a88:	e3520010 	cmp	r2, #16
    1a8c:	21a02222 	lsrcs	r2, r2, #4
    1a90:	22433004 	subcs	r3, r3, #4
    1a94:	e3520004 	cmp	r2, #4
    1a98:	22433002 	subcs	r3, r3, #2
    1a9c:	304330a2 	subcc	r3, r3, r2, lsr #1
    1aa0:	e04331a2 	sub	r3, r3, r2, lsr #3
    1aa4:	e2532020 	subs	r2, r3, #32
    1aa8:	aa000007 	bge	1acc <__adddf3+0x1c4>
    1aac:	e292200c 	adds	r2, r2, #12
    1ab0:	da000004 	ble	1ac8 <__adddf3+0x1c0>
    1ab4:	e282c014 	add	r12, r2, #20
    1ab8:	e262200c 	rsb	r2, r2, #12
    1abc:	e1a00c11 	lsl	r0, r1, r12
    1ac0:	e1a01231 	lsr	r1, r1, r2
    1ac4:	ea000004 	b	1adc <__adddf3+0x1d4>
    1ac8:	e2822014 	add	r2, r2, #20
    1acc:	d262c020 	rsble	r12, r2, #32
    1ad0:	e1a01211 	lsl	r1, r1, r2
    1ad4:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1ad8:	d1a00210 	lslle	r0, r0, r2
    1adc:	e0544003 	subs	r4, r4, r3
    1ae0:	a0811a04 	addge	r1, r1, r4, lsl #20
    1ae4:	a1811005 	orrge	r1, r1, r5
    1ae8:	a8bd4030 	popge	{r4, r5, lr}
    1aec:	a12fff1e 	bxge	lr
    1af0:	e1e04004 	mvn	r4, r4
    1af4:	e254401f 	subs	r4, r4, #31
    1af8:	aa00000f 	bge	1b3c <__adddf3+0x234>
    1afc:	e294400c 	adds	r4, r4, #12
    1b00:	ca000006 	bgt	1b20 <__adddf3+0x218>
    1b04:	e2844014 	add	r4, r4, #20
    1b08:	e2642020 	rsb	r2, r4, #32
    1b0c:	e1a00430 	lsr	r0, r0, r4
    1b10:	e1800211 	orr	r0, r0, r1, lsl r2
    1b14:	e1851431 	orr	r1, r5, r1, lsr r4
    1b18:	e8bd4030 	pop	{r4, r5, lr}
    1b1c:	e12fff1e 	bx	lr
    1b20:	e264400c 	rsb	r4, r4, #12
    1b24:	e2642020 	rsb	r2, r4, #32
    1b28:	e1a00230 	lsr	r0, r0, r2
    1b2c:	e1800411 	orr	r0, r0, r1, lsl r4
    1b30:	e1a01005 	mov	r1, r5
    1b34:	e8bd4030 	pop	{r4, r5, lr}
    1b38:	e12fff1e 	bx	lr
    1b3c:	e1a00431 	lsr	r0, r1, r4
    1b40:	e1a01005 	mov	r1, r5
    1b44:	e8bd4030 	pop	{r4, r5, lr}
    1b48:	e12fff1e 	bx	lr
    1b4c:	e3340000 	teq	r4, #0
    1b50:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1b54:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1b58:	02844001 	addeq	r4, r4, #1
    1b5c:	12455001 	subne	r5, r5, #1
    1b60:	eaffff8f 	b	19a4 <__adddf3+0x9c>
    1b64:	e1f0cac4 	mvns	r12, r4, asr #21
    1b68:	11f0cac5 	mvnsne	r12, r5, asr #21
    1b6c:	0a00001d 	beq	1be8 <__adddf3+0x2e0>
    1b70:	e1340005 	teq	r4, r5
    1b74:	01300002 	teqeq	r0, r2
    1b78:	0a000004 	beq	1b90 <__adddf3+0x288>
    1b7c:	e194c000 	orrs	r12, r4, r0
    1b80:	01a01003 	moveq	r1, r3
    1b84:	01a00002 	moveq	r0, r2
    1b88:	e8bd4030 	pop	{r4, r5, lr}
    1b8c:	e12fff1e 	bx	lr
    1b90:	e1310003 	teq	r1, r3
    1b94:	13a01000 	movne	r1, #0
    1b98:	13a00000 	movne	r0, #0
    1b9c:	18bd4030 	popne	{r4, r5, lr}
    1ba0:	112fff1e 	bxne	lr
    1ba4:	e1b0caa4 	lsrs	r12, r4, #21
    1ba8:	1a000004 	bne	1bc0 <__adddf3+0x2b8>
    1bac:	e1b00080 	lsls	r0, r0, #1
    1bb0:	e0b11001 	adcs	r1, r1, r1
    1bb4:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1bb8:	e8bd4030 	pop	{r4, r5, lr}
    1bbc:	e12fff1e 	bx	lr
    1bc0:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1bc4:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1bc8:	38bd4030 	popcc	{r4, r5, lr}
    1bcc:	312fff1e 	bxcc	lr
    1bd0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1bd4:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1bd8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1bdc:	e3a00000 	mov	r0, #0
    1be0:	e8bd4030 	pop	{r4, r5, lr}
    1be4:	e12fff1e 	bx	lr
    1be8:	e1f0cac4 	mvns	r12, r4, asr #21
    1bec:	11a01003 	movne	r1, r3
    1bf0:	11a00002 	movne	r0, r2
    1bf4:	01f0cac5 	mvnseq	r12, r5, asr #21
    1bf8:	11a03001 	movne	r3, r1
    1bfc:	11a02000 	movne	r2, r0
    1c00:	e1904601 	orrs	r4, r0, r1, lsl #12
    1c04:	01925603 	orrseq	r5, r2, r3, lsl #12
    1c08:	01310003 	teqeq	r1, r3
    1c0c:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1c10:	e8bd4030 	pop	{r4, r5, lr}
    1c14:	e12fff1e 	bx	lr

00001c18 <__aeabi_ui2d>:
    1c18:	e3300000 	teq	r0, #0
    1c1c:	03a01000 	moveq	r1, #0
    1c20:	012fff1e 	bxeq	lr
    1c24:	e92d4030 	push	{r4, r5, lr}
    1c28:	e3a04b01 	mov	r4, #1024	; 0x400
    1c2c:	e2844032 	add	r4, r4, #50	; 0x32
    1c30:	e3a05000 	mov	r5, #0
    1c34:	e3a01000 	mov	r1, #0
    1c38:	eaffff86 	b	1a58 <__adddf3+0x150>

00001c3c <__aeabi_i2d>:
    1c3c:	e3300000 	teq	r0, #0
    1c40:	03a01000 	moveq	r1, #0
    1c44:	012fff1e 	bxeq	lr
    1c48:	e92d4030 	push	{r4, r5, lr}
    1c4c:	e3a04b01 	mov	r4, #1024	; 0x400
    1c50:	e2844032 	add	r4, r4, #50	; 0x32
    1c54:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1c58:	42600000 	rsbmi	r0, r0, #0
    1c5c:	e3a01000 	mov	r1, #0
    1c60:	eaffff7c 	b	1a58 <__adddf3+0x150>

00001c64 <__aeabi_f2d>:
    1c64:	e1b02080 	lsls	r2, r0, #1
    1c68:	e1a011c2 	asr	r1, r2, #3
    1c6c:	e1a01061 	rrx	r1, r1
    1c70:	e1a00e02 	lsl	r0, r2, #28
    1c74:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1c78:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1c7c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1c80:	112fff1e 	bxne	lr
    1c84:	e3320000 	teq	r2, #0
    1c88:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1c8c:	012fff1e 	bxeq	lr
    1c90:	e92d4030 	push	{r4, r5, lr}
    1c94:	e3a04d0e 	mov	r4, #896	; 0x380
    1c98:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1c9c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1ca0:	eaffff6c 	b	1a58 <__adddf3+0x150>

00001ca4 <__aeabi_ul2d>:
    1ca4:	e1902001 	orrs	r2, r0, r1
    1ca8:	012fff1e 	bxeq	lr
    1cac:	e92d4030 	push	{r4, r5, lr}
    1cb0:	e3a05000 	mov	r5, #0
    1cb4:	ea000006 	b	1cd4 <__aeabi_l2d+0x1c>

00001cb8 <__aeabi_l2d>:
    1cb8:	e1902001 	orrs	r2, r0, r1
    1cbc:	012fff1e 	bxeq	lr
    1cc0:	e92d4030 	push	{r4, r5, lr}
    1cc4:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1cc8:	5a000001 	bpl	1cd4 <__aeabi_l2d+0x1c>
    1ccc:	e2700000 	rsbs	r0, r0, #0
    1cd0:	e2e11000 	rsc	r1, r1, #0
    1cd4:	e3a04b01 	mov	r4, #1024	; 0x400
    1cd8:	e2844032 	add	r4, r4, #50	; 0x32
    1cdc:	e1b0cb21 	lsrs	r12, r1, #22
    1ce0:	0affff44 	beq	19f8 <__adddf3+0xf0>
    1ce4:	e3a02003 	mov	r2, #3
    1ce8:	e1b0c1ac 	lsrs	r12, r12, #3
    1cec:	12822003 	addne	r2, r2, #3
    1cf0:	e1b0c1ac 	lsrs	r12, r12, #3
    1cf4:	12822003 	addne	r2, r2, #3
    1cf8:	e08221ac 	add	r2, r2, r12, lsr #3
    1cfc:	e2623020 	rsb	r3, r2, #32
    1d00:	e1a0c310 	lsl	r12, r0, r3
    1d04:	e1a00230 	lsr	r0, r0, r2
    1d08:	e1800311 	orr	r0, r0, r1, lsl r3
    1d0c:	e1a01231 	lsr	r1, r1, r2
    1d10:	e0844002 	add	r4, r4, r2
    1d14:	eaffff37 	b	19f8 <__adddf3+0xf0>

00001d18 <__aeabi_dmul>:
    1d18:	e92d4070 	push	{r4, r5, r6, lr}
    1d1c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1d20:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1d24:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1d28:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1d2c:	1134000c 	teqne	r4, r12
    1d30:	1135000c 	teqne	r5, r12
    1d34:	0b000075 	bleq	1f10 <__aeabi_dmul+0x1f8>
    1d38:	e0844005 	add	r4, r4, r5
    1d3c:	e0216003 	eor	r6, r1, r3
    1d40:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1d44:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1d48:	e1905601 	orrs	r5, r0, r1, lsl #12
    1d4c:	11925603 	orrsne	r5, r2, r3, lsl #12
    1d50:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1d54:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1d58:	0a00001d 	beq	1dd4 <__aeabi_dmul+0xbc>
    1d5c:	e08ec290 	umull	r12, lr, r0, r2
    1d60:	e3a05000 	mov	r5, #0
    1d64:	e0a5e291 	umlal	lr, r5, r1, r2
    1d68:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1d6c:	e0a5e390 	umlal	lr, r5, r0, r3
    1d70:	e3a06000 	mov	r6, #0
    1d74:	e0a65391 	umlal	r5, r6, r1, r3
    1d78:	e33c0000 	teq	r12, #0
    1d7c:	138ee001 	orrne	lr, lr, #1
    1d80:	e24440ff 	sub	r4, r4, #255	; 0xff
    1d84:	e3560c02 	cmp	r6, #512	; 0x200
    1d88:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1d8c:	2a000002 	bcs	1d9c <__aeabi_dmul+0x84>
    1d90:	e1b0e08e 	lsls	lr, lr, #1
    1d94:	e0b55005 	adcs	r5, r5, r5
    1d98:	e0a66006 	adc	r6, r6, r6
    1d9c:	e1821586 	orr	r1, r2, r6, lsl #11
    1da0:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1da4:	e1a00585 	lsl	r0, r5, #11
    1da8:	e1800aae 	orr	r0, r0, lr, lsr #21
    1dac:	e1a0e58e 	lsl	lr, lr, #11
    1db0:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1db4:	835c0c07 	cmphi	r12, #1792	; 0x700
    1db8:	8a000011 	bhi	1e04 <__aeabi_dmul+0xec>
    1dbc:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1dc0:	01b0e0a0 	lsrseq	lr, r0, #1
    1dc4:	e2b00000 	adcs	r0, r0, #0
    1dc8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1dcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dd0:	e12fff1e 	bx	lr
    1dd4:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1dd8:	e1861001 	orr	r1, r6, r1
    1ddc:	e1800002 	orr	r0, r0, r2
    1de0:	e0211003 	eor	r1, r1, r3
    1de4:	e05440ac 	subs	r4, r4, r12, lsr #1
    1de8:	c074500c 	rsbsgt	r5, r4, r12
    1dec:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1df0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1df4:	c12fff1e 	bxgt	lr
    1df8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1dfc:	e3a0e000 	mov	lr, #0
    1e00:	e2544001 	subs	r4, r4, #1
    1e04:	ca00005d 	bgt	1f80 <__aeabi_dmul+0x268>
    1e08:	e3740036 	cmn	r4, #54	; 0x36
    1e0c:	d3a00000 	movle	r0, #0
    1e10:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1e14:	d8bd4070 	pople	{r4, r5, r6, lr}
    1e18:	d12fff1e 	bxle	lr
    1e1c:	e2644000 	rsb	r4, r4, #0
    1e20:	e2544020 	subs	r4, r4, #32
    1e24:	aa00001a 	bge	1e94 <__aeabi_dmul+0x17c>
    1e28:	e294400c 	adds	r4, r4, #12
    1e2c:	ca00000c 	bgt	1e64 <__aeabi_dmul+0x14c>
    1e30:	e2844014 	add	r4, r4, #20
    1e34:	e2645020 	rsb	r5, r4, #32
    1e38:	e1a03510 	lsl	r3, r0, r5
    1e3c:	e1a00430 	lsr	r0, r0, r4
    1e40:	e1800511 	orr	r0, r0, r1, lsl r5
    1e44:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1e48:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1e4c:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1e50:	e0a21431 	adc	r1, r2, r1, lsr r4
    1e54:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1e58:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1e5c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e60:	e12fff1e 	bx	lr
    1e64:	e264400c 	rsb	r4, r4, #12
    1e68:	e2645020 	rsb	r5, r4, #32
    1e6c:	e1a03410 	lsl	r3, r0, r4
    1e70:	e1a00530 	lsr	r0, r0, r5
    1e74:	e1800411 	orr	r0, r0, r1, lsl r4
    1e78:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e7c:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1e80:	e2a11000 	adc	r1, r1, #0
    1e84:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1e88:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1e8c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e90:	e12fff1e 	bx	lr
    1e94:	e2645020 	rsb	r5, r4, #32
    1e98:	e18ee510 	orr	lr, lr, r0, lsl r5
    1e9c:	e1a03430 	lsr	r3, r0, r4
    1ea0:	e1833511 	orr	r3, r3, r1, lsl r5
    1ea4:	e1a00431 	lsr	r0, r1, r4
    1ea8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1eac:	e1c00431 	bic	r0, r0, r1, lsr r4
    1eb0:	e0800fa3 	add	r0, r0, r3, lsr #31
    1eb4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1eb8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1ebc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ec0:	e12fff1e 	bx	lr
    1ec4:	e3340000 	teq	r4, #0
    1ec8:	1a000008 	bne	1ef0 <__aeabi_dmul+0x1d8>
    1ecc:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1ed0:	e1b00080 	lsls	r0, r0, #1
    1ed4:	e0a11001 	adc	r1, r1, r1
    1ed8:	e3110601 	tst	r1, #1048576	; 0x100000
    1edc:	02444001 	subeq	r4, r4, #1
    1ee0:	0afffffa 	beq	1ed0 <__aeabi_dmul+0x1b8>
    1ee4:	e1811006 	orr	r1, r1, r6
    1ee8:	e3350000 	teq	r5, #0
    1eec:	112fff1e 	bxne	lr
    1ef0:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1ef4:	e1b02082 	lsls	r2, r2, #1
    1ef8:	e0a33003 	adc	r3, r3, r3
    1efc:	e3130601 	tst	r3, #1048576	; 0x100000
    1f00:	02455001 	subeq	r5, r5, #1
    1f04:	0afffffa 	beq	1ef4 <__aeabi_dmul+0x1dc>
    1f08:	e1833006 	orr	r3, r3, r6
    1f0c:	e12fff1e 	bx	lr
    1f10:	e134000c 	teq	r4, r12
    1f14:	e00c5a23 	and	r5, r12, r3, lsr #20
    1f18:	1135000c 	teqne	r5, r12
    1f1c:	0a000007 	beq	1f40 <__aeabi_dmul+0x228>
    1f20:	e1906081 	orrs	r6, r0, r1, lsl #1
    1f24:	11926083 	orrsne	r6, r2, r3, lsl #1
    1f28:	1affffe5 	bne	1ec4 <__aeabi_dmul+0x1ac>
    1f2c:	e0211003 	eor	r1, r1, r3
    1f30:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1f34:	e3a00000 	mov	r0, #0
    1f38:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f3c:	e12fff1e 	bx	lr
    1f40:	e1906081 	orrs	r6, r0, r1, lsl #1
    1f44:	01a00002 	moveq	r0, r2
    1f48:	01a01003 	moveq	r1, r3
    1f4c:	11926083 	orrsne	r6, r2, r3, lsl #1
    1f50:	0a000010 	beq	1f98 <__aeabi_dmul+0x280>
    1f54:	e134000c 	teq	r4, r12
    1f58:	1a000001 	bne	1f64 <__aeabi_dmul+0x24c>
    1f5c:	e1906601 	orrs	r6, r0, r1, lsl #12
    1f60:	1a00000c 	bne	1f98 <__aeabi_dmul+0x280>
    1f64:	e135000c 	teq	r5, r12
    1f68:	1a000003 	bne	1f7c <__aeabi_dmul+0x264>
    1f6c:	e1926603 	orrs	r6, r2, r3, lsl #12
    1f70:	11a00002 	movne	r0, r2
    1f74:	11a01003 	movne	r1, r3
    1f78:	1a000006 	bne	1f98 <__aeabi_dmul+0x280>
    1f7c:	e0211003 	eor	r1, r1, r3
    1f80:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1f84:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1f88:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1f8c:	e3a00000 	mov	r0, #0
    1f90:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f94:	e12fff1e 	bx	lr
    1f98:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1f9c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1fa0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1fa4:	e12fff1e 	bx	lr

00001fa8 <__aeabi_ddiv>:
    1fa8:	e92d4070 	push	{r4, r5, r6, lr}
    1fac:	e3a0c0ff 	mov	r12, #255	; 0xff
    1fb0:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1fb4:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1fb8:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1fbc:	1134000c 	teqne	r4, r12
    1fc0:	1135000c 	teqne	r5, r12
    1fc4:	0b00005e 	bleq	2144 <__aeabi_ddiv+0x19c>
    1fc8:	e0444005 	sub	r4, r4, r5
    1fcc:	e021e003 	eor	lr, r1, r3
    1fd0:	e1925603 	orrs	r5, r2, r3, lsl #12
    1fd4:	e1a01601 	lsl	r1, r1, #12
    1fd8:	0a00004c 	beq	2110 <__aeabi_ddiv+0x168>
    1fdc:	e1a03603 	lsl	r3, r3, #12
    1fe0:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1fe4:	e1853223 	orr	r3, r5, r3, lsr #4
    1fe8:	e1833c22 	orr	r3, r3, r2, lsr #24
    1fec:	e1a02402 	lsl	r2, r2, #8
    1ff0:	e1855221 	orr	r5, r5, r1, lsr #4
    1ff4:	e1855c20 	orr	r5, r5, r0, lsr #24
    1ff8:	e1a06400 	lsl	r6, r0, #8
    1ffc:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    2000:	e1550003 	cmp	r5, r3
    2004:	01560002 	cmpeq	r6, r2
    2008:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    200c:	e2844c03 	add	r4, r4, #768	; 0x300
    2010:	2a000001 	bcs	201c <__aeabi_ddiv+0x74>
    2014:	e1b030a3 	lsrs	r3, r3, #1
    2018:	e1a02062 	rrx	r2, r2
    201c:	e0566002 	subs	r6, r6, r2
    2020:	e0c55003 	sbc	r5, r5, r3
    2024:	e1b030a3 	lsrs	r3, r3, #1
    2028:	e1a02062 	rrx	r2, r2
    202c:	e3a00601 	mov	r0, #1048576	; 0x100000
    2030:	e3a0c702 	mov	r12, #524288	; 0x80000
    2034:	e056e002 	subs	lr, r6, r2
    2038:	e0d5e003 	sbcs	lr, r5, r3
    203c:	20466002 	subcs	r6, r6, r2
    2040:	21a0500e 	movcs	r5, lr
    2044:	2180000c 	orrcs	r0, r0, r12
    2048:	e1b030a3 	lsrs	r3, r3, #1
    204c:	e1a02062 	rrx	r2, r2
    2050:	e056e002 	subs	lr, r6, r2
    2054:	e0d5e003 	sbcs	lr, r5, r3
    2058:	20466002 	subcs	r6, r6, r2
    205c:	21a0500e 	movcs	r5, lr
    2060:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2064:	e1b030a3 	lsrs	r3, r3, #1
    2068:	e1a02062 	rrx	r2, r2
    206c:	e056e002 	subs	lr, r6, r2
    2070:	e0d5e003 	sbcs	lr, r5, r3
    2074:	20466002 	subcs	r6, r6, r2
    2078:	21a0500e 	movcs	r5, lr
    207c:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2080:	e1b030a3 	lsrs	r3, r3, #1
    2084:	e1a02062 	rrx	r2, r2
    2088:	e056e002 	subs	lr, r6, r2
    208c:	e0d5e003 	sbcs	lr, r5, r3
    2090:	20466002 	subcs	r6, r6, r2
    2094:	21a0500e 	movcs	r5, lr
    2098:	218001ac 	orrcs	r0, r0, r12, lsr #3
    209c:	e195e006 	orrs	lr, r5, r6
    20a0:	0a00000d 	beq	20dc <__aeabi_ddiv+0x134>
    20a4:	e1a05205 	lsl	r5, r5, #4
    20a8:	e1855e26 	orr	r5, r5, r6, lsr #28
    20ac:	e1a06206 	lsl	r6, r6, #4
    20b0:	e1a03183 	lsl	r3, r3, #3
    20b4:	e1833ea2 	orr	r3, r3, r2, lsr #29
    20b8:	e1a02182 	lsl	r2, r2, #3
    20bc:	e1b0c22c 	lsrs	r12, r12, #4
    20c0:	1affffdb 	bne	2034 <__aeabi_ddiv+0x8c>
    20c4:	e3110601 	tst	r1, #1048576	; 0x100000
    20c8:	1a000006 	bne	20e8 <__aeabi_ddiv+0x140>
    20cc:	e1811000 	orr	r1, r1, r0
    20d0:	e3a00000 	mov	r0, #0
    20d4:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    20d8:	eaffffd5 	b	2034 <__aeabi_ddiv+0x8c>
    20dc:	e3110601 	tst	r1, #1048576	; 0x100000
    20e0:	01811000 	orreq	r1, r1, r0
    20e4:	03a00000 	moveq	r0, #0
    20e8:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    20ec:	835c0c07 	cmphi	r12, #1792	; 0x700
    20f0:	8affff43 	bhi	1e04 <__aeabi_dmul+0xec>
    20f4:	e055c003 	subs	r12, r5, r3
    20f8:	0056c002 	subseq	r12, r6, r2
    20fc:	01b0c0a0 	lsrseq	r12, r0, #1
    2100:	e2b00000 	adcs	r0, r0, #0
    2104:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2108:	e8bd4070 	pop	{r4, r5, r6, lr}
    210c:	e12fff1e 	bx	lr
    2110:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2114:	e18e1621 	orr	r1, lr, r1, lsr #12
    2118:	e09440ac 	adds	r4, r4, r12, lsr #1
    211c:	c074500c 	rsbsgt	r5, r4, r12
    2120:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2124:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2128:	c12fff1e 	bxgt	lr
    212c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2130:	e3a0e000 	mov	lr, #0
    2134:	e2544001 	subs	r4, r4, #1
    2138:	eaffff31 	b	1e04 <__aeabi_dmul+0xec>
    213c:	e185e006 	orr	lr, r5, r6
    2140:	eaffff2f 	b	1e04 <__aeabi_dmul+0xec>
    2144:	e00c5a23 	and	r5, r12, r3, lsr #20
    2148:	e134000c 	teq	r4, r12
    214c:	0135000c 	teqeq	r5, r12
    2150:	0affff90 	beq	1f98 <__aeabi_dmul+0x280>
    2154:	e134000c 	teq	r4, r12
    2158:	1a000006 	bne	2178 <__aeabi_ddiv+0x1d0>
    215c:	e1904601 	orrs	r4, r0, r1, lsl #12
    2160:	1affff8c 	bne	1f98 <__aeabi_dmul+0x280>
    2164:	e135000c 	teq	r5, r12
    2168:	1affff83 	bne	1f7c <__aeabi_dmul+0x264>
    216c:	e1a00002 	mov	r0, r2
    2170:	e1a01003 	mov	r1, r3
    2174:	eaffff87 	b	1f98 <__aeabi_dmul+0x280>
    2178:	e135000c 	teq	r5, r12
    217c:	1a000004 	bne	2194 <__aeabi_ddiv+0x1ec>
    2180:	e1925603 	orrs	r5, r2, r3, lsl #12
    2184:	0affff68 	beq	1f2c <__aeabi_dmul+0x214>
    2188:	e1a00002 	mov	r0, r2
    218c:	e1a01003 	mov	r1, r3
    2190:	eaffff80 	b	1f98 <__aeabi_dmul+0x280>
    2194:	e1906081 	orrs	r6, r0, r1, lsl #1
    2198:	11926083 	orrsne	r6, r2, r3, lsl #1
    219c:	1affff48 	bne	1ec4 <__aeabi_dmul+0x1ac>
    21a0:	e1904081 	orrs	r4, r0, r1, lsl #1
    21a4:	1affff74 	bne	1f7c <__aeabi_dmul+0x264>
    21a8:	e1925083 	orrs	r5, r2, r3, lsl #1
    21ac:	1affff5e 	bne	1f2c <__aeabi_dmul+0x214>
    21b0:	eaffff78 	b	1f98 <__aeabi_dmul+0x280>

000021b4 <__aeabi_d2iz>:
    21b4:	e1a02081 	lsl	r2, r1, #1
    21b8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    21bc:	2a00000c 	bcs	21f4 <__aeabi_d2iz+0x40>
    21c0:	5a000009 	bpl	21ec <__aeabi_d2iz+0x38>
    21c4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    21c8:	e0532ac2 	subs	r2, r3, r2, asr #21
    21cc:	9a00000a 	bls	21fc <__aeabi_d2iz+0x48>
    21d0:	e1a03581 	lsl	r3, r1, #11
    21d4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    21d8:	e1833aa0 	orr	r3, r3, r0, lsr #21
    21dc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    21e0:	e1a00233 	lsr	r0, r3, r2
    21e4:	12600000 	rsbne	r0, r0, #0
    21e8:	e12fff1e 	bx	lr
    21ec:	e3a00000 	mov	r0, #0
    21f0:	e12fff1e 	bx	lr
    21f4:	e1900601 	orrs	r0, r0, r1, lsl #12
    21f8:	1a000002 	bne	2208 <__aeabi_d2iz+0x54>
    21fc:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2200:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2204:	e12fff1e 	bx	lr
    2208:	e3a00000 	mov	r0, #0
    220c:	e12fff1e 	bx	lr

00002210 <__aeabi_frsub>:
    2210:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    2214:	ea000000 	b	221c <__addsf3>

00002218 <__aeabi_fsub>:
    2218:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

0000221c <__addsf3>:
    221c:	e1b02080 	lsls	r2, r0, #1
    2220:	11b03081 	lslsne	r3, r1, #1
    2224:	11320003 	teqne	r2, r3
    2228:	11f0cc42 	mvnsne	r12, r2, asr #24
    222c:	11f0cc43 	mvnsne	r12, r3, asr #24
    2230:	0a000047 	beq	2354 <__addsf3+0x138>
    2234:	e1a02c22 	lsr	r2, r2, #24
    2238:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    223c:	c0822003 	addgt	r2, r2, r3
    2240:	c0201001 	eorgt	r1, r0, r1
    2244:	c0210000 	eorgt	r0, r1, r0
    2248:	c0201001 	eorgt	r1, r0, r1
    224c:	b2633000 	rsblt	r3, r3, #0
    2250:	e3530019 	cmp	r3, #25
    2254:	812fff1e 	bxhi	lr
    2258:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    225c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2260:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    2264:	12600000 	rsbne	r0, r0, #0
    2268:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    226c:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    2270:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2274:	12611000 	rsbne	r1, r1, #0
    2278:	e1320003 	teq	r2, r3
    227c:	0a00002e 	beq	233c <__addsf3+0x120>
    2280:	e2422001 	sub	r2, r2, #1
    2284:	e0900351 	adds	r0, r0, r1, asr r3
    2288:	e2633020 	rsb	r3, r3, #32
    228c:	e1a01311 	lsl	r1, r1, r3
    2290:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2294:	5a000001 	bpl	22a0 <__addsf3+0x84>
    2298:	e2711000 	rsbs	r1, r1, #0
    229c:	e2e00000 	rsc	r0, r0, #0
    22a0:	e3500502 	cmp	r0, #8388608	; 0x800000
    22a4:	3a00000b 	bcc	22d8 <__addsf3+0xbc>
    22a8:	e3500401 	cmp	r0, #16777216	; 0x1000000
    22ac:	3a000004 	bcc	22c4 <__addsf3+0xa8>
    22b0:	e1b000a0 	lsrs	r0, r0, #1
    22b4:	e1a01061 	rrx	r1, r1
    22b8:	e2822001 	add	r2, r2, #1
    22bc:	e35200fe 	cmp	r2, #254	; 0xfe
    22c0:	2a000038 	bcs	23a8 <__addsf3+0x18c>
    22c4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    22c8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    22cc:	03c00001 	biceq	r0, r0, #1
    22d0:	e1800003 	orr	r0, r0, r3
    22d4:	e12fff1e 	bx	lr
    22d8:	e1b01081 	lsls	r1, r1, #1
    22dc:	e0a00000 	adc	r0, r0, r0
    22e0:	e3100502 	tst	r0, #8388608	; 0x800000
    22e4:	e2422001 	sub	r2, r2, #1
    22e8:	1afffff5 	bne	22c4 <__addsf3+0xa8>
    22ec:	e1b0c620 	lsrs	r12, r0, #12
    22f0:	01a00600 	lsleq	r0, r0, #12
    22f4:	0242200c 	subeq	r2, r2, #12
    22f8:	e31008ff 	tst	r0, #16711680	; 0xff0000
    22fc:	01a00400 	lsleq	r0, r0, #8
    2300:	02422008 	subeq	r2, r2, #8
    2304:	e310060f 	tst	r0, #15728640	; 0xf00000
    2308:	01a00200 	lsleq	r0, r0, #4
    230c:	02422004 	subeq	r2, r2, #4
    2310:	e3100503 	tst	r0, #12582912	; 0xc00000
    2314:	01a00100 	lsleq	r0, r0, #2
    2318:	02422002 	subeq	r2, r2, #2
    231c:	e3500502 	cmp	r0, #8388608	; 0x800000
    2320:	31a00080 	lslcc	r0, r0, #1
    2324:	e2d22000 	sbcs	r2, r2, #0
    2328:	a0800b82 	addge	r0, r0, r2, lsl #23
    232c:	b2622000 	rsblt	r2, r2, #0
    2330:	a1800003 	orrge	r0, r0, r3
    2334:	b1830230 	orrlt	r0, r3, r0, lsr r2
    2338:	e12fff1e 	bx	lr
    233c:	e3320000 	teq	r2, #0
    2340:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    2344:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    2348:	02822001 	addeq	r2, r2, #1
    234c:	12433001 	subne	r3, r3, #1
    2350:	eaffffca 	b	2280 <__addsf3+0x64>
    2354:	e1a03081 	lsl	r3, r1, #1
    2358:	e1f0cc42 	mvns	r12, r2, asr #24
    235c:	11f0cc43 	mvnsne	r12, r3, asr #24
    2360:	0a000013 	beq	23b4 <__addsf3+0x198>
    2364:	e1320003 	teq	r2, r3
    2368:	0a000002 	beq	2378 <__addsf3+0x15c>
    236c:	e3320000 	teq	r2, #0
    2370:	01a00001 	moveq	r0, r1
    2374:	e12fff1e 	bx	lr
    2378:	e1300001 	teq	r0, r1
    237c:	13a00000 	movne	r0, #0
    2380:	112fff1e 	bxne	lr
    2384:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2388:	1a000002 	bne	2398 <__addsf3+0x17c>
    238c:	e1b00080 	lsls	r0, r0, #1
    2390:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2394:	e12fff1e 	bx	lr
    2398:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    239c:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    23a0:	312fff1e 	bxcc	lr
    23a4:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    23a8:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    23ac:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    23b0:	e12fff1e 	bx	lr
    23b4:	e1f02c42 	mvns	r2, r2, asr #24
    23b8:	11a00001 	movne	r0, r1
    23bc:	01f03c43 	mvnseq	r3, r3, asr #24
    23c0:	11a01000 	movne	r1, r0
    23c4:	e1b02480 	lsls	r2, r0, #9
    23c8:	01b03481 	lslseq	r3, r1, #9
    23cc:	01300001 	teqeq	r0, r1
    23d0:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    23d4:	e12fff1e 	bx	lr

000023d8 <__aeabi_ui2f>:
    23d8:	e3a03000 	mov	r3, #0
    23dc:	ea000001 	b	23e8 <__aeabi_i2f+0x8>

000023e0 <__aeabi_i2f>:
    23e0:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    23e4:	42600000 	rsbmi	r0, r0, #0
    23e8:	e1b0c000 	movs	r12, r0
    23ec:	012fff1e 	bxeq	lr
    23f0:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    23f4:	e1a01000 	mov	r1, r0
    23f8:	e3a00000 	mov	r0, #0
    23fc:	ea00000f 	b	2440 <__aeabi_l2f+0x30>

00002400 <__aeabi_ul2f>:
    2400:	e1902001 	orrs	r2, r0, r1
    2404:	012fff1e 	bxeq	lr
    2408:	e3a03000 	mov	r3, #0
    240c:	ea000005 	b	2428 <__aeabi_l2f+0x18>

00002410 <__aeabi_l2f>:
    2410:	e1902001 	orrs	r2, r0, r1
    2414:	012fff1e 	bxeq	lr
    2418:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    241c:	5a000001 	bpl	2428 <__aeabi_l2f+0x18>
    2420:	e2700000 	rsbs	r0, r0, #0
    2424:	e2e11000 	rsc	r1, r1, #0
    2428:	e1b0c001 	movs	r12, r1
    242c:	01a0c000 	moveq	r12, r0
    2430:	01a01000 	moveq	r1, r0
    2434:	03a00000 	moveq	r0, #0
    2438:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    243c:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    2440:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    2444:	e3a02017 	mov	r2, #23
    2448:	e35c0801 	cmp	r12, #65536	; 0x10000
    244c:	21a0c82c 	lsrcs	r12, r12, #16
    2450:	22422010 	subcs	r2, r2, #16
    2454:	e35c0c01 	cmp	r12, #256	; 0x100
    2458:	21a0c42c 	lsrcs	r12, r12, #8
    245c:	22422008 	subcs	r2, r2, #8
    2460:	e35c0010 	cmp	r12, #16
    2464:	21a0c22c 	lsrcs	r12, r12, #4
    2468:	22422004 	subcs	r2, r2, #4
    246c:	e35c0004 	cmp	r12, #4
    2470:	22422002 	subcs	r2, r2, #2
    2474:	304220ac 	subcc	r2, r2, r12, lsr #1
    2478:	e05221ac 	subs	r2, r2, r12, lsr #3
    247c:	e0433b82 	sub	r3, r3, r2, lsl #23
    2480:	ba000006 	blt	24a0 <__aeabi_l2f+0x90>
    2484:	e0833211 	add	r3, r3, r1, lsl r2
    2488:	e1a0c210 	lsl	r12, r0, r2
    248c:	e2622020 	rsb	r2, r2, #32
    2490:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2494:	e0a30230 	adc	r0, r3, r0, lsr r2
    2498:	03c00001 	biceq	r0, r0, #1
    249c:	e12fff1e 	bx	lr
    24a0:	e2822020 	add	r2, r2, #32
    24a4:	e1a0c211 	lsl	r12, r1, r2
    24a8:	e2622020 	rsb	r2, r2, #32
    24ac:	e190008c 	orrs	r0, r0, r12, lsl #1
    24b0:	e0a30231 	adc	r0, r3, r1, lsr r2
    24b4:	01c00fac 	biceq	r0, r0, r12, lsr #31
    24b8:	e12fff1e 	bx	lr

000024bc <__aeabi_fmul>:
    24bc:	e3a0c0ff 	mov	r12, #255	; 0xff
    24c0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    24c4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    24c8:	1132000c 	teqne	r2, r12
    24cc:	1133000c 	teqne	r3, r12
    24d0:	0a00003e 	beq	25d0 <__aeabi_fmul+0x114>
    24d4:	e0822003 	add	r2, r2, r3
    24d8:	e020c001 	eor	r12, r0, r1
    24dc:	e1b00480 	lsls	r0, r0, #9
    24e0:	11b01481 	lslsne	r1, r1, #9
    24e4:	0a000010 	beq	252c <__aeabi_fmul+0x70>
    24e8:	e3a03302 	mov	r3, #134217728	; 0x8000000
    24ec:	e18302a0 	orr	r0, r3, r0, lsr #5
    24f0:	e18312a1 	orr	r1, r3, r1, lsr #5
    24f4:	e0813190 	umull	r3, r1, r0, r1
    24f8:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    24fc:	e3510502 	cmp	r1, #8388608	; 0x800000
    2500:	31a01081 	lslcc	r1, r1, #1
    2504:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2508:	31a03083 	lslcc	r3, r3, #1
    250c:	e1800001 	orr	r0, r0, r1
    2510:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    2514:	e35200fd 	cmp	r2, #253	; 0xfd
    2518:	8a00000f 	bhi	255c <__aeabi_fmul+0xa0>
    251c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2520:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2524:	03c00001 	biceq	r0, r0, #1
    2528:	e12fff1e 	bx	lr
    252c:	e3300000 	teq	r0, #0
    2530:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2534:	01a01481 	lsleq	r1, r1, #9
    2538:	e18c04a0 	orr	r0, r12, r0, lsr #9
    253c:	e18004a1 	orr	r0, r0, r1, lsr #9
    2540:	e252207f 	subs	r2, r2, #127	; 0x7f
    2544:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2548:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    254c:	c12fff1e 	bxgt	lr
    2550:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2554:	e3a03000 	mov	r3, #0
    2558:	e2522001 	subs	r2, r2, #1
    255c:	ca000035 	bgt	2638 <__aeabi_fmul+0x17c>
    2560:	e3720019 	cmn	r2, #25
    2564:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    2568:	d12fff1e 	bxle	lr
    256c:	e2622000 	rsb	r2, r2, #0
    2570:	e1b01080 	lsls	r1, r0, #1
    2574:	e1a01231 	lsr	r1, r1, r2
    2578:	e2622020 	rsb	r2, r2, #32
    257c:	e1a0c210 	lsl	r12, r0, r2
    2580:	e1b00061 	rrxs	r0, r1
    2584:	e2a00000 	adc	r0, r0, #0
    2588:	e193308c 	orrs	r3, r3, r12, lsl #1
    258c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2590:	e12fff1e 	bx	lr
    2594:	e3320000 	teq	r2, #0
    2598:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    259c:	01a00080 	lsleq	r0, r0, #1
    25a0:	03100502 	tsteq	r0, #8388608	; 0x800000
    25a4:	02422001 	subeq	r2, r2, #1
    25a8:	0afffffb 	beq	259c <__aeabi_fmul+0xe0>
    25ac:	e180000c 	orr	r0, r0, r12
    25b0:	e3330000 	teq	r3, #0
    25b4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    25b8:	01a01081 	lsleq	r1, r1, #1
    25bc:	03110502 	tsteq	r1, #8388608	; 0x800000
    25c0:	02433001 	subeq	r3, r3, #1
    25c4:	0afffffb 	beq	25b8 <__aeabi_fmul+0xfc>
    25c8:	e181100c 	orr	r1, r1, r12
    25cc:	eaffffc0 	b	24d4 <__aeabi_fmul+0x18>
    25d0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    25d4:	e132000c 	teq	r2, r12
    25d8:	1133000c 	teqne	r3, r12
    25dc:	0a000005 	beq	25f8 <__aeabi_fmul+0x13c>
    25e0:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    25e4:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    25e8:	1affffe9 	bne	2594 <__aeabi_fmul+0xd8>
    25ec:	e0200001 	eor	r0, r0, r1
    25f0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    25f4:	e12fff1e 	bx	lr
    25f8:	e3300000 	teq	r0, #0
    25fc:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2600:	01a00001 	moveq	r0, r1
    2604:	13310000 	teqne	r1, #0
    2608:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    260c:	0a00000d 	beq	2648 <__aeabi_fmul+0x18c>
    2610:	e132000c 	teq	r2, r12
    2614:	1a000001 	bne	2620 <__aeabi_fmul+0x164>
    2618:	e1b02480 	lsls	r2, r0, #9
    261c:	1a000009 	bne	2648 <__aeabi_fmul+0x18c>
    2620:	e133000c 	teq	r3, r12
    2624:	1a000002 	bne	2634 <__aeabi_fmul+0x178>
    2628:	e1b03481 	lsls	r3, r1, #9
    262c:	11a00001 	movne	r0, r1
    2630:	1a000004 	bne	2648 <__aeabi_fmul+0x18c>
    2634:	e0200001 	eor	r0, r0, r1
    2638:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    263c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2640:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2644:	e12fff1e 	bx	lr
    2648:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    264c:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    2650:	e12fff1e 	bx	lr

00002654 <__aeabi_fdiv>:
    2654:	e3a0c0ff 	mov	r12, #255	; 0xff
    2658:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    265c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2660:	1132000c 	teqne	r2, r12
    2664:	1133000c 	teqne	r3, r12
    2668:	0a00003a 	beq	2758 <__aeabi_fdiv+0x104>
    266c:	e0422003 	sub	r2, r2, r3
    2670:	e020c001 	eor	r12, r0, r1
    2674:	e1b01481 	lsls	r1, r1, #9
    2678:	e1a00480 	lsl	r0, r0, #9
    267c:	0a00001c 	beq	26f4 <__aeabi_fdiv+0xa0>
    2680:	e3a03201 	mov	r3, #268435456	; 0x10000000
    2684:	e1831221 	orr	r1, r3, r1, lsr #4
    2688:	e1833220 	orr	r3, r3, r0, lsr #4
    268c:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2690:	e1530001 	cmp	r3, r1
    2694:	31a03083 	lslcc	r3, r3, #1
    2698:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    269c:	e3a0c502 	mov	r12, #8388608	; 0x800000
    26a0:	e1530001 	cmp	r3, r1
    26a4:	20433001 	subcs	r3, r3, r1
    26a8:	2180000c 	orrcs	r0, r0, r12
    26ac:	e15300a1 	cmp	r3, r1, lsr #1
    26b0:	204330a1 	subcs	r3, r3, r1, lsr #1
    26b4:	218000ac 	orrcs	r0, r0, r12, lsr #1
    26b8:	e1530121 	cmp	r3, r1, lsr #2
    26bc:	20433121 	subcs	r3, r3, r1, lsr #2
    26c0:	2180012c 	orrcs	r0, r0, r12, lsr #2
    26c4:	e15301a1 	cmp	r3, r1, lsr #3
    26c8:	204331a1 	subcs	r3, r3, r1, lsr #3
    26cc:	218001ac 	orrcs	r0, r0, r12, lsr #3
    26d0:	e1b03203 	lsls	r3, r3, #4
    26d4:	11b0c22c 	lsrsne	r12, r12, #4
    26d8:	1afffff0 	bne	26a0 <__aeabi_fdiv+0x4c>
    26dc:	e35200fd 	cmp	r2, #253	; 0xfd
    26e0:	8affff9d 	bhi	255c <__aeabi_fmul+0xa0>
    26e4:	e1530001 	cmp	r3, r1
    26e8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    26ec:	03c00001 	biceq	r0, r0, #1
    26f0:	e12fff1e 	bx	lr
    26f4:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    26f8:	e18c04a0 	orr	r0, r12, r0, lsr #9
    26fc:	e292207f 	adds	r2, r2, #127	; 0x7f
    2700:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2704:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2708:	c12fff1e 	bxgt	lr
    270c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2710:	e3a03000 	mov	r3, #0
    2714:	e2522001 	subs	r2, r2, #1
    2718:	eaffff8f 	b	255c <__aeabi_fmul+0xa0>
    271c:	e3320000 	teq	r2, #0
    2720:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2724:	01a00080 	lsleq	r0, r0, #1
    2728:	03100502 	tsteq	r0, #8388608	; 0x800000
    272c:	02422001 	subeq	r2, r2, #1
    2730:	0afffffb 	beq	2724 <__aeabi_fdiv+0xd0>
    2734:	e180000c 	orr	r0, r0, r12
    2738:	e3330000 	teq	r3, #0
    273c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2740:	01a01081 	lsleq	r1, r1, #1
    2744:	03110502 	tsteq	r1, #8388608	; 0x800000
    2748:	02433001 	subeq	r3, r3, #1
    274c:	0afffffb 	beq	2740 <__aeabi_fdiv+0xec>
    2750:	e181100c 	orr	r1, r1, r12
    2754:	eaffffc4 	b	266c <__aeabi_fdiv+0x18>
    2758:	e00c3ba1 	and	r3, r12, r1, lsr #23
    275c:	e132000c 	teq	r2, r12
    2760:	1a000005 	bne	277c <__aeabi_fdiv+0x128>
    2764:	e1b02480 	lsls	r2, r0, #9
    2768:	1affffb6 	bne	2648 <__aeabi_fmul+0x18c>
    276c:	e133000c 	teq	r3, r12
    2770:	1affffaf 	bne	2634 <__aeabi_fmul+0x178>
    2774:	e1a00001 	mov	r0, r1
    2778:	eaffffb2 	b	2648 <__aeabi_fmul+0x18c>
    277c:	e133000c 	teq	r3, r12
    2780:	1a000003 	bne	2794 <__aeabi_fdiv+0x140>
    2784:	e1b03481 	lsls	r3, r1, #9
    2788:	0affff97 	beq	25ec <__aeabi_fmul+0x130>
    278c:	e1a00001 	mov	r0, r1
    2790:	eaffffac 	b	2648 <__aeabi_fmul+0x18c>
    2794:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2798:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    279c:	1affffde 	bne	271c <__aeabi_fdiv+0xc8>
    27a0:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    27a4:	1affffa2 	bne	2634 <__aeabi_fmul+0x178>
    27a8:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    27ac:	1affff8e 	bne	25ec <__aeabi_fmul+0x130>
    27b0:	eaffffa4 	b	2648 <__aeabi_fmul+0x18c>

000027b4 <__aeabi_f2iz>:
    27b4:	e1a02080 	lsl	r2, r0, #1
    27b8:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    27bc:	3a000008 	bcc	27e4 <__aeabi_f2iz+0x30>
    27c0:	e3a0309e 	mov	r3, #158	; 0x9e
    27c4:	e0532c22 	subs	r2, r3, r2, lsr #24
    27c8:	9a000007 	bls	27ec <__aeabi_f2iz+0x38>
    27cc:	e1a03400 	lsl	r3, r0, #8
    27d0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    27d4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    27d8:	e1a00233 	lsr	r0, r3, r2
    27dc:	12600000 	rsbne	r0, r0, #0
    27e0:	e12fff1e 	bx	lr
    27e4:	e3a00000 	mov	r0, #0
    27e8:	e12fff1e 	bx	lr
    27ec:	e3720061 	cmn	r2, #97	; 0x61
    27f0:	1a000001 	bne	27fc <__aeabi_f2iz+0x48>
    27f4:	e1b02480 	lsls	r2, r0, #9
    27f8:	1a000002 	bne	2808 <__aeabi_f2iz+0x54>
    27fc:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2800:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2804:	e12fff1e 	bx	lr
    2808:	e3a00000 	mov	r0, #0
    280c:	e12fff1e 	bx	lr

00002810 <atexit>:
    2810:	e1a01000 	mov	r1, r0
    2814:	e3a00000 	mov	r0, #0
    2818:	e92d4008 	push	{r3, lr}
    281c:	e1a02000 	mov	r2, r0
    2820:	e1a03000 	mov	r3, r0
    2824:	eb00005b 	bl	2998 <__register_exitproc>
    2828:	e8bd4008 	pop	{r3, lr}
    282c:	e12fff1e 	bx	lr

00002830 <exit>:
    2830:	e92d4008 	push	{r3, lr}
    2834:	e3a01000 	mov	r1, #0
    2838:	e1a04000 	mov	r4, r0
    283c:	eb000092 	bl	2a8c <__call_exitprocs>
    2840:	e59f3018 	ldr	r3, [pc, #24]	; 2860 <exit+0x30>
    2844:	e5930000 	ldr	r0, [r3]
    2848:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    284c:	e3530000 	cmp	r3, #0
    2850:	11a0e00f 	movne	lr, pc
    2854:	112fff13 	bxne	r3
    2858:	e1a00004 	mov	r0, r4
    285c:	eb000116 	bl	2cbc <_exit>
    2860:	00002d64 	.word	0x00002d64

00002864 <memset>:
    2864:	e3520003 	cmp	r2, #3
    2868:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    286c:	e20110ff 	and	r1, r1, #255	; 0xff
    2870:	8a000008 	bhi	2898 <memset+0x34>
    2874:	e3520000 	cmp	r2, #0
    2878:	0a000004 	beq	2890 <memset+0x2c>
    287c:	e1a03000 	mov	r3, r0
    2880:	e0822000 	add	r2, r2, r0
    2884:	e4c31001 	strb	r1, [r3], #1
    2888:	e1530002 	cmp	r3, r2
    288c:	1afffffc 	bne	2884 <memset+0x20>
    2890:	e8bd0010 	ldmfd	sp!, {r4}
    2894:	e12fff1e 	bx	lr
    2898:	e3100003 	tst	r0, #3
    289c:	e0802002 	add	r2, r0, r2
    28a0:	0a000007 	beq	28c4 <memset+0x60>
    28a4:	e280c001 	add	r12, r0, #1
    28a8:	e20c3003 	and	r3, r12, #3
    28ac:	e3530000 	cmp	r3, #0
    28b0:	e54c1001 	strb	r1, [r12, #-1]
    28b4:	e1a0300c 	mov	r3, r12
    28b8:	e28cc001 	add	r12, r12, #1
    28bc:	1afffff9 	bne	28a8 <memset+0x44>
    28c0:	ea000000 	b	28c8 <memset+0x64>
    28c4:	e1a03000 	mov	r3, r0
    28c8:	e0634002 	rsb	r4, r3, r2
    28cc:	e081c401 	add	r12, r1, r1, lsl #8
    28d0:	e354003f 	cmp	r4, #63	; 0x3f
    28d4:	e08cc80c 	add	r12, r12, r12, lsl #16
    28d8:	da00001a 	ble	2948 <memset+0xe4>
    28dc:	e583c000 	str	r12, [r3]
    28e0:	e583c004 	str	r12, [r3, #4]
    28e4:	e583c008 	str	r12, [r3, #8]
    28e8:	e583c00c 	str	r12, [r3, #12]
    28ec:	e583c010 	str	r12, [r3, #16]
    28f0:	e583c014 	str	r12, [r3, #20]
    28f4:	e583c018 	str	r12, [r3, #24]
    28f8:	e583c01c 	str	r12, [r3, #28]
    28fc:	e583c020 	str	r12, [r3, #32]
    2900:	e583c024 	str	r12, [r3, #36]	; 0x24
    2904:	e583c028 	str	r12, [r3, #40]	; 0x28
    2908:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    290c:	e583c030 	str	r12, [r3, #48]	; 0x30
    2910:	e583c034 	str	r12, [r3, #52]	; 0x34
    2914:	e583c038 	str	r12, [r3, #56]	; 0x38
    2918:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    291c:	e2833040 	add	r3, r3, #64	; 0x40
    2920:	e0634002 	rsb	r4, r3, r2
    2924:	e354003f 	cmp	r4, #63	; 0x3f
    2928:	caffffeb 	bgt	28dc <memset+0x78>
    292c:	ea000005 	b	2948 <memset+0xe4>
    2930:	e583c000 	str	r12, [r3]
    2934:	e583c004 	str	r12, [r3, #4]
    2938:	e583c008 	str	r12, [r3, #8]
    293c:	e583c00c 	str	r12, [r3, #12]
    2940:	e2833010 	add	r3, r3, #16
    2944:	e0634002 	rsb	r4, r3, r2
    2948:	e354000f 	cmp	r4, #15
    294c:	cafffff7 	bgt	2930 <memset+0xcc>
    2950:	e3540003 	cmp	r4, #3
    2954:	da000006 	ble	2974 <memset+0x110>
    2958:	e2834004 	add	r4, r3, #4
    295c:	e0643002 	rsb	r3, r4, r2
    2960:	e3530003 	cmp	r3, #3
    2964:	e504c004 	str	r12, [r4, #-4]
    2968:	e1a03004 	mov	r3, r4
    296c:	e2844004 	add	r4, r4, #4
    2970:	cafffff9 	bgt	295c <memset+0xf8>
    2974:	e1520003 	cmp	r2, r3
    2978:	9affffc4 	bls	2890 <memset+0x2c>
    297c:	e2833001 	add	r3, r3, #1
    2980:	e2822001 	add	r2, r2, #1
    2984:	e5431001 	strb	r1, [r3, #-1]
    2988:	e2833001 	add	r3, r3, #1
    298c:	e1530002 	cmp	r3, r2
    2990:	1afffffb 	bne	2984 <memset+0x120>
    2994:	eaffffbd 	b	2890 <memset+0x2c>

00002998 <__register_exitproc>:
    2998:	e59fc0e4 	ldr	r12, [pc, #228]	; 2a84 <__register_exitproc+0xec>
    299c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    29a0:	e59c4000 	ldr	r4, [r12]
    29a4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    29a8:	e35c0000 	cmp	r12, #0
    29ac:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    29b0:	e59c5004 	ldr	r5, [r12, #4]
    29b4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    29b8:	e355001f 	cmp	r5, #31
    29bc:	e24dd010 	sub	sp, sp, #16
    29c0:	e1a06000 	mov	r6, r0
    29c4:	da000015 	ble	2a20 <__register_exitproc+0x88>
    29c8:	e59f00b8 	ldr	r0, [pc, #184]	; 2a88 <__register_exitproc+0xf0>
    29cc:	e3500000 	cmp	r0, #0
    29d0:	1a000001 	bne	29dc <__register_exitproc+0x44>
    29d4:	e3e00000 	mvn	r0, #0
    29d8:	ea000018 	b	2a40 <__register_exitproc+0xa8>
    29dc:	e3a00e19 	mov	r0, #400	; 0x190
    29e0:	e58d100c 	str	r1, [sp, #12]
    29e4:	e58d2008 	str	r2, [sp, #8]
    29e8:	e58d3004 	str	r3, [sp, #4]
    29ec:	e320f000 	nop	{0}
    29f0:	e250c000 	subs	r12, r0, #0
    29f4:	e59d100c 	ldr	r1, [sp, #12]
    29f8:	e59d2008 	ldr	r2, [sp, #8]
    29fc:	e59d3004 	ldr	r3, [sp, #4]
    2a00:	0afffff3 	beq	29d4 <__register_exitproc+0x3c>
    2a04:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2a08:	e3a00000 	mov	r0, #0
    2a0c:	e58c0004 	str	r0, [r12, #4]
    2a10:	e58c5000 	str	r5, [r12]
    2a14:	e584c148 	str	r12, [r4, #328]	; 0x148
    2a18:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2a1c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2a20:	e3560000 	cmp	r6, #0
    2a24:	e59c4004 	ldr	r4, [r12, #4]
    2a28:	1a000007 	bne	2a4c <__register_exitproc+0xb4>
    2a2c:	e2843002 	add	r3, r4, #2
    2a30:	e2844001 	add	r4, r4, #1
    2a34:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2a38:	e58c4004 	str	r4, [r12, #4]
    2a3c:	e3a00000 	mov	r0, #0
    2a40:	e28dd010 	add	sp, sp, #16
    2a44:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2a48:	e12fff1e 	bx	lr
    2a4c:	e3a00001 	mov	r0, #1
    2a50:	e1a00410 	lsl	r0, r0, r4
    2a54:	e08c8104 	add	r8, r12, r4, lsl #2
    2a58:	e3560002 	cmp	r6, #2
    2a5c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2a60:	e5883108 	str	r3, [r8, #264]	; 0x108
    2a64:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2a68:	e1877000 	orr	r7, r7, r0
    2a6c:	01830000 	orreq	r0, r3, r0
    2a70:	e1a05008 	mov	r5, r8
    2a74:	e5882088 	str	r2, [r8, #136]	; 0x88
    2a78:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2a7c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2a80:	eaffffe9 	b	2a2c <__register_exitproc+0x94>
    2a84:	00002d64 	.word	0x00002d64
    2a88:	00000000 	.word	0x00000000

00002a8c <__call_exitprocs>:
    2a8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2a90:	e59f3168 	ldr	r3, [pc, #360]	; 2c00 <__call_exitprocs+0x174>
    2a94:	e5933000 	ldr	r3, [r3]
    2a98:	e24dd014 	sub	sp, sp, #20
    2a9c:	e58d3004 	str	r3, [sp, #4]
    2aa0:	e2833f52 	add	r3, r3, #328	; 0x148
    2aa4:	e58d0008 	str	r0, [sp, #8]
    2aa8:	e58d300c 	str	r3, [sp, #12]
    2aac:	e1a07001 	mov	r7, r1
    2ab0:	e3a08001 	mov	r8, #1
    2ab4:	e59d3004 	ldr	r3, [sp, #4]
    2ab8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2abc:	e3560000 	cmp	r6, #0
    2ac0:	e59db00c 	ldr	r11, [sp, #12]
    2ac4:	0a000033 	beq	2b98 <__call_exitprocs+0x10c>
    2ac8:	e5965004 	ldr	r5, [r6, #4]
    2acc:	e2554001 	subs	r4, r5, #1
    2ad0:	5286a088 	addpl	r10, r6, #136	; 0x88
    2ad4:	5285501f 	addpl	r5, r5, #31
    2ad8:	508a5105 	addpl	r5, r10, r5, lsl #2
    2adc:	5a000007 	bpl	2b00 <__call_exitprocs+0x74>
    2ae0:	ea000029 	b	2b8c <__call_exitprocs+0x100>
    2ae4:	e5953000 	ldr	r3, [r5]
    2ae8:	e1530007 	cmp	r3, r7
    2aec:	0a000005 	beq	2b08 <__call_exitprocs+0x7c>
    2af0:	e2444001 	sub	r4, r4, #1
    2af4:	e3740001 	cmn	r4, #1
    2af8:	e2455004 	sub	r5, r5, #4
    2afc:	0a000022 	beq	2b8c <__call_exitprocs+0x100>
    2b00:	e3570000 	cmp	r7, #0
    2b04:	1afffff6 	bne	2ae4 <__call_exitprocs+0x58>
    2b08:	e5963004 	ldr	r3, [r6, #4]
    2b0c:	e06a2005 	rsb	r2, r10, r5
    2b10:	e2433001 	sub	r3, r3, #1
    2b14:	e0862002 	add	r2, r6, r2
    2b18:	e1530004 	cmp	r3, r4
    2b1c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2b20:	13a01000 	movne	r1, #0
    2b24:	05864004 	streq	r4, [r6, #4]
    2b28:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2b2c:	e3530000 	cmp	r3, #0
    2b30:	0affffee 	beq	2af0 <__call_exitprocs+0x64>
    2b34:	e1a02418 	lsl	r2, r8, r4
    2b38:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2b3c:	e1120001 	tst	r2, r1
    2b40:	e5969004 	ldr	r9, [r6, #4]
    2b44:	0a000016 	beq	2ba4 <__call_exitprocs+0x118>
    2b48:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2b4c:	e1120001 	tst	r2, r1
    2b50:	1a000016 	bne	2bb0 <__call_exitprocs+0x124>
    2b54:	e59d0008 	ldr	r0, [sp, #8]
    2b58:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2b5c:	e1a0e00f 	mov	lr, pc
    2b60:	e12fff13 	bx	r3
    2b64:	e5963004 	ldr	r3, [r6, #4]
    2b68:	e1530009 	cmp	r3, r9
    2b6c:	1affffd0 	bne	2ab4 <__call_exitprocs+0x28>
    2b70:	e59b3000 	ldr	r3, [r11]
    2b74:	e1530006 	cmp	r3, r6
    2b78:	1affffcd 	bne	2ab4 <__call_exitprocs+0x28>
    2b7c:	e2444001 	sub	r4, r4, #1
    2b80:	e3740001 	cmn	r4, #1
    2b84:	e2455004 	sub	r5, r5, #4
    2b88:	1affffdc 	bne	2b00 <__call_exitprocs+0x74>
    2b8c:	e59f1070 	ldr	r1, [pc, #112]	; 2c04 <__call_exitprocs+0x178>
    2b90:	e3510000 	cmp	r1, #0
    2b94:	1a000009 	bne	2bc0 <__call_exitprocs+0x134>
    2b98:	e28dd014 	add	sp, sp, #20
    2b9c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ba0:	e12fff1e 	bx	lr
    2ba4:	e1a0e00f 	mov	lr, pc
    2ba8:	e12fff13 	bx	r3
    2bac:	eaffffec 	b	2b64 <__call_exitprocs+0xd8>
    2bb0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2bb4:	e1a0e00f 	mov	lr, pc
    2bb8:	e12fff13 	bx	r3
    2bbc:	eaffffe8 	b	2b64 <__call_exitprocs+0xd8>
    2bc0:	e5963004 	ldr	r3, [r6, #4]
    2bc4:	e3530000 	cmp	r3, #0
    2bc8:	e5963000 	ldr	r3, [r6]
    2bcc:	1a000008 	bne	2bf4 <__call_exitprocs+0x168>
    2bd0:	e3530000 	cmp	r3, #0
    2bd4:	0a000006 	beq	2bf4 <__call_exitprocs+0x168>
    2bd8:	e1a00006 	mov	r0, r6
    2bdc:	e58b3000 	str	r3, [r11]
    2be0:	e320f000 	nop	{0}
    2be4:	e59b6000 	ldr	r6, [r11]
    2be8:	e3560000 	cmp	r6, #0
    2bec:	1affffb5 	bne	2ac8 <__call_exitprocs+0x3c>
    2bf0:	eaffffe8 	b	2b98 <__call_exitprocs+0x10c>
    2bf4:	e1a0b006 	mov	r11, r6
    2bf8:	e1a06003 	mov	r6, r3
    2bfc:	eafffff9 	b	2be8 <__call_exitprocs+0x15c>
    2c00:	00002d64 	.word	0x00002d64
    2c04:	00000000 	.word	0x00000000

00002c08 <register_fini>:
    2c08:	e92d4008 	push	{r3, lr}
    2c0c:	e59f3010 	ldr	r3, [pc, #16]	; 2c24 <register_fini+0x1c>
    2c10:	e3530000 	cmp	r3, #0
    2c14:	159f000c 	ldrne	r0, [pc, #12]	; 2c28 <register_fini+0x20>
    2c18:	1bfffefc 	blne	2810 <atexit>
    2c1c:	e8bd4008 	pop	{r3, lr}
    2c20:	e12fff1e 	bx	lr
    2c24:	00002d8c 	.word	0x00002d8c
    2c28:	00002c2c 	.word	0x00002c2c

00002c2c <__libc_fini_array>:
    2c2c:	e92d4038 	push	{r3, r4, r5, lr}
    2c30:	e59f5030 	ldr	r5, [pc, #48]	; 2c68 <__libc_fini_array+0x3c>
    2c34:	e59f4030 	ldr	r4, [pc, #48]	; 2c6c <__libc_fini_array+0x40>
    2c38:	e0654004 	rsb	r4, r5, r4
    2c3c:	e1b04144 	asrs	r4, r4, #2
    2c40:	10855104 	addne	r5, r5, r4, lsl #2
    2c44:	0a000004 	beq	2c5c <__libc_fini_array+0x30>
    2c48:	e5353004 	ldr	r3, [r5, #-4]!
    2c4c:	e1a0e00f 	mov	lr, pc
    2c50:	e12fff13 	bx	r3
    2c54:	e2544001 	subs	r4, r4, #1
    2c58:	1afffffa 	bne	2c48 <__libc_fini_array+0x1c>
    2c5c:	eb00004a 	bl	2d8c <__libc_fini>
    2c60:	e8bd4038 	pop	{r3, r4, r5, lr}
    2c64:	e12fff1e 	bx	lr
    2c68:	00002da4 	.word	0x00002da4
    2c6c:	00002da8 	.word	0x00002da8

00002c70 <__cs3_premain>:
    2c70:	e92d4008 	push	{r3, lr}
    2c74:	eb000017 	bl	2cd8 <__libc_init_array>
    2c78:	e59f3030 	ldr	r3, [pc, #48]	; 2cb0 <__cs3_premain+0x40>
    2c7c:	e3530000 	cmp	r3, #0
    2c80:	15930000 	ldrne	r0, [r3]
    2c84:	01a00003 	moveq	r0, r3
    2c88:	e59f3024 	ldr	r3, [pc, #36]	; 2cb4 <__cs3_premain+0x44>
    2c8c:	e3530000 	cmp	r3, #0
    2c90:	15931000 	ldrne	r1, [r3]
    2c94:	01a01003 	moveq	r1, r3
    2c98:	e3a02000 	mov	r2, #0
    2c9c:	ebfff6bf 	bl	7a0 <main>
    2ca0:	e59f3010 	ldr	r3, [pc, #16]	; 2cb8 <__cs3_premain+0x48>
    2ca4:	e3530000 	cmp	r3, #0
    2ca8:	1bfffee0 	blne	2830 <exit>
    2cac:	eafffffe 	b	2cac <__cs3_premain+0x3c>
	...
    2cb8:	00002830 	.word	0x00002830

00002cbc <_exit>:
    2cbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2cc0:	e3a00018 	mov	r0, #24
    2cc4:	e59f1004 	ldr	r1, [pc, #4]	; 2cd0 <_exit+0x14>
    2cc8:	ef123456 	svc	0x00123456
    2ccc:	eafffffe 	b	2ccc <_exit+0x10>
    2cd0:	00020026 	.word	0x00020026

00002cd4 <__cs3_isr_interrupt>:
    2cd4:	eafffffe 	b	2cd4 <__cs3_isr_interrupt>

00002cd8 <__libc_init_array>:
    2cd8:	e92d4070 	push	{r4, r5, r6, lr}
    2cdc:	e59f506c 	ldr	r5, [pc, #108]	; 2d50 <__libc_init_array+0x78>
    2ce0:	e59f606c 	ldr	r6, [pc, #108]	; 2d54 <__libc_init_array+0x7c>
    2ce4:	e0656006 	rsb	r6, r5, r6
    2ce8:	e1b06146 	asrs	r6, r6, #2
    2cec:	12455004 	subne	r5, r5, #4
    2cf0:	13a04000 	movne	r4, #0
    2cf4:	0a000005 	beq	2d10 <__libc_init_array+0x38>
    2cf8:	e5b53004 	ldr	r3, [r5, #4]!
    2cfc:	e2844001 	add	r4, r4, #1
    2d00:	e1a0e00f 	mov	lr, pc
    2d04:	e12fff13 	bx	r3
    2d08:	e1560004 	cmp	r6, r4
    2d0c:	1afffff9 	bne	2cf8 <__libc_init_array+0x20>
    2d10:	e59f5040 	ldr	r5, [pc, #64]	; 2d58 <__libc_init_array+0x80>
    2d14:	e59f6040 	ldr	r6, [pc, #64]	; 2d5c <__libc_init_array+0x84>
    2d18:	e0656006 	rsb	r6, r5, r6
    2d1c:	eb000012 	bl	2d6c <_init>
    2d20:	e1b06146 	asrs	r6, r6, #2
    2d24:	12455004 	subne	r5, r5, #4
    2d28:	13a04000 	movne	r4, #0
    2d2c:	0a000005 	beq	2d48 <__libc_init_array+0x70>
    2d30:	e5b53004 	ldr	r3, [r5, #4]!
    2d34:	e2844001 	add	r4, r4, #1
    2d38:	e1a0e00f 	mov	lr, pc
    2d3c:	e12fff13 	bx	r3
    2d40:	e1560004 	cmp	r6, r4
    2d44:	1afffff9 	bne	2d30 <__libc_init_array+0x58>
    2d48:	e8bd4070 	pop	{r4, r5, r6, lr}
    2d4c:	e12fff1e 	bx	lr
    2d50:	00002d84 	.word	0x00002d84
    2d54:	00002d84 	.word	0x00002d84
    2d58:	00002d84 	.word	0x00002d84
    2d5c:	00002d8c 	.word	0x00002d8c

Disassembly of section .rodata:

00002d64 <_global_impure_ptr>:
    2d64:	00031bf0 00000043                       ....C...

00002d6c <_init>:
    2d6c:	e1a0c00d 	mov	r12, sp
    2d70:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2d74:	e24cb004 	sub	r11, r12, #4
    2d78:	e24bd028 	sub	sp, r11, #40	; 0x28
    2d7c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2d80:	e12fff1e 	bx	lr

00002d84 <__init_array_start>:
    2d84:	00002c08 	.word	0x00002c08

00002d88 <__frame_dummy_init_array_entry>:
    2d88:	00000208                                ....

00002d8c <__libc_fini>:
    2d8c:	e1a0c00d 	mov	r12, sp
    2d90:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2d94:	e24cb004 	sub	r11, r12, #4
    2d98:	e24bd028 	sub	sp, r11, #40	; 0x28
    2d9c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2da0:	e12fff1e 	bx	lr

00002da4 <__fini_array_start>:
    2da4:	000001c4 	.word	0x000001c4

00002da8 <__cs3_regions>:
	...
    2db4:	00032020 	.word	0x00032020
    2db8:	00000028 	.word	0x00000028

00002dbc <__cs3_regions_end>:
    2dbc:	00000000 	.word	0x00000000
